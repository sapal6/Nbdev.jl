### A Nbdev script file ###
### Autogenerated file. Don't modify. ###

module Export
#export
using ReusePatterns

#export
import Pluto: Notebook, Cell, load_notebook

#export
function processMdChunk(mdChunk::String)
	chopMdMarker(mdChunk)
end

#export
begin
Base.@kwdef mutable struct Nucleus
	code::String=""
	parsedcode::Union{Nothing,Expr}=nothing
	end
	
code(cell::Cell) = cell.code
parsedcode(cell::Cell) = cell.parsedcode

Nucleus(code, parsedcode) = Nucleus(code = code, parsedcode = parsedcode)
end

#export
begin
mutable struct Nb
	nuclei::Array{Nucleus,1}
	name::AbstractString
end

nuclei(nuclei::Array) = nuclei
name(name::AbstractString) = name
end

#export
begin
const _header = "### A Nbdev script file ###"
const _sub_header = "### Autogenerated file. Don't modify. ###"
end

#export
begin
function collect_nuclei(notebook::Notebook, marker::String)
	notebook_cells=notebook.cells
	nuclei=[]
		
	if marker=="md"
		nuclei=collect_nuclei(notebook::Notebook, notebook_cells)
	else
	    for i in 1:length(notebook_cells)
	    	raw_code=code(notebook_cells[i])
	    	parsed_code=parsedcode(notebook_cells[i])
	    	nucleus=Nucleus(raw_code, parsed_code)
	    	
	    	if startswith(raw_code, marker)
	            push!(nuclei,nucleus)
            end
	    	
	    end
	end
	 nuclei
	
end
	
#TODO: if raw code i snot  export or hide
#collect those Cells and make an array
function collect_nuclei(notebook::Notebook, notebook_cells)
	cells=Cell[]
    for i in 1:length(notebook_cells)
		raw_code=code(notebook_cells[i])
		
		if !startswith(raw_code, "#hide") && !startswith(raw_code, "#export") 
	        push!(cells,Cell(raw_code))
        end
		
	end
	cells
end
end

#export
begin
	
load_nb(filename::String, marker::String) = _load_notebook(filename, marker)
	
function _load_notebook(filename::String, marker::String)
		notebook=load_notebook(filename)
		collected_nuclei=nuclei(collect_nuclei(notebook, marker))
		
		if marker=="md"
			notebook
		else
			Nb(collected_nuclei, filename)
		end
end

end

#export
strip=(x::String,y) -> replace(x, y=>"")

#export
begin
	
function save_nb(io, notebook)
    println(io, _header)
    println(io, _sub_header)
    println(io, "")
    println(io, "module $(uppercasefirst(strip(strip(notebook.name, r"[0-9_]"), r".jl")))")
	for nucleus in notebook.nuclei
			println(io, nucleus.code*"\n")
    end
	#notebook
	print(io, "end")	
end

function save_nb(notebook::Nb, path::String)
	file_name=uppercasefirst(strip(notebook.name, r"[0-9_]"))
	open(joinpath(path, file_name), "w") do io
        save_nb(io, notebook)
    end
end
end

#export
begin
function readfilenames()
	files=[]
	for file in readdir()
			if endswith(file, ".jl")
				push!(files,file)
			end
			#if getfile_extension(file)== ".jl"
			#	push!(files,file)
			#end
	end
	files
end

function readfilenames(dir::String)
	files=cd(readdir, dir)
	files
end
end

#export
function export_file(file::String, path::String, marker::String)
	notebook=load_nb(file, "#export")
	save_nb(notebook, path)
end

#export
function export_content(files::AbstractVector, path::String, marker::String)
	map(file->export_file(file, path, marker), files)
end

#export
function getfile_extension(filename)
    return filename[findlast(isequal('.'),filename):end]
end

#export
#TODO: Too many loops. Need to clear this either 
#by broadcasting or something more efficient
#TODO: User should eb able to get messages about which
#files are updated
#TODO: currently output inside loop is not shown in pluto notebooks.
#so, the show_output displays all stuffs in the console.
#maybe a progress bar would be better
function notebook2script()
	export_content(readfilenames(), "../src", "#export")
end

end