### A Nbdev script file ###
### Autogenerated file. Don't modify. ###

module Documenter
#export
using Markdown

#export
using ReusePatterns

#export
using Images, FileIO

#export
begin
include("../src/Export.jl")
#const Nb = Export.Nb 
end

#export
import Pluto: Notebook, Cell

#export
load_nb=Export.load_nb

#export
include("../src/ConfigReader.jl")

#export
include("../src/CodeRunner.jl")

#export
begin
Base.@kwdef mutable struct Section
	line::String=""
end
	
Section(line)=Section(line=line)
end

#export
begin
struct Page
	sections::Array{Section,1}
    name::AbstractString
end
	
Page(sections, path)=Page(sections=sections, path=path)
end

#export
function img(img_path::String)
	load(img_path)
end

#export
using Publish

#export
function newsitegen(configpath::String="../settings.ini")
	config=read_conf(configpath)
	if isdir("../docs")
		error("$(config["lib_name"])_docs directory is already present")
	else
	    #setup("../$(config["lib_name"])_docs")
		setup("../")
		mkdir("../docs")
	end
end

#export
function run_and_update_nb(file::AbstractString)
	notebook=load_nb(file, "md")
	return CodeRunner.execute_code(notebook)
end

#export
begin
function stitchCode(cell::Cell)
	#cleanedCode=Export.strip(Export.strip(cell.code,"\n"), "\n")
	#string("<p><code>",cleanedCode,cell.output_repr,"</code></p>\n")
	string("```","\n$(cell.code)\n","\n$(cell.output_repr)\n","```\n")
end

function stitchCode(cellop::AbstractString)
	#cleanedop=Export.strip(Export.strip(cellop,"\n"), "\n")
	#string("<p><code>",cleanedop,"</code></p>\n")
	string("```","\n$cellop\n","```\n")
end
end

#export
grabFuncSig=(pat, fdesc) -> match(pat, fdesc).match

#export
begin
pat4func=r"[a-zA-Z]+\([^\)]*\)(\.[^\)]*\))?"
pat4anonymfunc = r"\([^\)]*\)(\.[^\)]*\))?"
end

#export
function showdDoc(fname, args...)
	fdesc=string(methods(fname).ms[1])
	fsig=grabFuncSig(pat4func, fdesc)
	if fsig==nothing
		return grabFuncSig(pat4anonymfunc, fdesc)
	else
		return fsig
	end
end

#export
function createPage(filename::AbstractString, notebook::Notebook)
	sections=Section[]
	
	for cell in notebook.cells
		
		if cell.errored
			error("Build stopped. Seems like the code $cell.code has an error")
			break
	    end
		
	    if startswith(cell.code, "md")
			push!(sections, Section(cell.output_repr))
		elseif !startswith(cell.code, "#export") && !startswith(cell.code, "#hide")
			if occursin(cell.code, "showDoc")
				stitched_code=stitchCode(cell.output_repr)
				push!(sections, Section(stitched_code))
			else
				stitched_code=stitchCode(cell)
			    push!(sections, Section(stitched_code))
			end
		end
	end
	
	Page(sections, filename)
end

#export
begin
const _header = "<html>"
const _footer = "</html>"
end

#export
md2html(md)=Markdown.html(md)

#export
begin
	
function save_page(io, page)
    #println(io, _header)
    println(io, "")
		
	pageHeading=uppercasefirst(Export.strip(Export.strip(page.name, r"[0-9_]"), r".jl"))
	heading2md=md"# $pageHeading"
		
    println(io, md2html(heading2md))
		
	for section in page.sections
			println(io, section.line*"\n")
    end
		
	#print(io, _footer)	
end

function save_page(page::Page, path::String)
	file_name=uppercasefirst(Export.strip(Export.strip(page.name, r"[0-9_]"), r".jl"))
	open(joinpath(path, file_name*".md"), "w") do io
        save_page(io, page)
    end
end
end

#export
begin
function export2html(file::String, path::String)
	notebook=run_and_update_nb(joinpath("../nbs",file))
	page=createPage(file, notebook)
	save_page(page, path)
end
	
export2html(files::AbstractVector, path::String)=map(file->export2html(file, path), files)
	
export2html()=export2html(Export.readfilenames(), "../docs")
end

end