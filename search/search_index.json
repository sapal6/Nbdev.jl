{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Alpha Release Nbdev This project is an attempt to port fastai Nbdev to Julia. Nbdev(both the oriignal version and the Julia version) are based on the idea of using Notebooks for literate programming. On a very high level the base idea is this \ud83d\udc47 While both projects try to achieve the same base goal i.e. generating source code and documentation from Notebooks, the Julia version aims to start from Pluto notebook while the python version starts from a Jupyter notebook. On the documentation side, I am using Mkdocs as the document generator while the original version uses Jekyll as the static site generator of choice. Getting-started Follow the tutorial to start experimenting with Nbdev. First among the version This is an alpha release of Nbdev so expect some breaks in plumbing here and there. Some features are still under development and are not included in this version. Feel free to log any issues, bugs (which I expect to come) here Anything that you feel like is missing and want to discuss the same or havean idea then start a new discussion here","title":"Home"},{"location":"#getting-started","text":"Follow the tutorial to start experimenting with Nbdev.","title":"Getting-started"},{"location":"#first-among-the-version","text":"This is an alpha release of Nbdev so expect some breaks in plumbing here and there. Some features are still under development and are not included in this version. Feel free to log any issues, bugs (which I expect to come) here Anything that you feel like is missing and want to discuss the same or havean idea then start a new discussion here","title":"First among the version"},{"location":"coderunner/","text":"CodeRunner You need to have something to capture the output. This is useful when you want to have examples or capture test output in the docs. I think the simplest way to do this is to do the following\ud83d\udc47 Take a notebook. Create a fake server, fake client etc. Run the notebook cell by cell and update the notebook with the output. This is taken straight from Pluto's webserver code using PlutoTest ------ Output ------ executecode notebook = Notebook([ Cell(\"x = 1\"), Cell(\"y = x\"), Cell(\"f(x) = x + y\"), Cell(\"f(4)\"), Cell(\"\"\"begin g(a) = x g(a,b) = y end\"\"\"), Cell(\"g(6) + g(6,6)\"), Cell(\"import Distributed\"), Cell(\"Distributed.myid()\"), ]) ------ Output ------ Any[\"Notebook\", Any[(:cells_dict, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pluto.Cell}\", :elements => Any[((\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"bccbbc38fc8956a7\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"79993d59f624574a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"fda7535bfe405ce8\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"272d3c5fd14c32bf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"744000b605cd5396\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain)), (:code, (\"\\\"g(6) + g(6,6)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f595e353ee1d7efc\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"af88bb16e203336f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"15837b24adf8b099\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4a49eb581785935f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"7f330f0b2f575cb7\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"b2b106e6ea4577c3\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5f69d97541c58635\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5736c635315f64e1\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"86c7a6d990812599\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"cfa6c8d6a23f6bf2\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"34bf1a8d10e87cc1\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e60f67cacf1093fe\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9f4e9de2c18f068b\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8e141ccb9f1a02f1\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ba446755f77a98f5\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"1e9db388bd3315b4\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"cd1532e09d1c277a\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5abb5b883868785b\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6b504e285992618b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"81ebf22406c9aa72\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f3e00075dbb56f15\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"54728c472dc87f2d\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ebd66308db4c147a\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"b92b75f375f638d8\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"1e665eafbfb96c47\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"bb5f3bac79ab28f6\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"59be7cf28fae0306\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8cea6b7c9cc187e3\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"e706ca12d0ff6032\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e60bd32b4f045a9b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e15ec63c45af5809\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"8a703c4438a1ec4c\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"440996790b04fc1d\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"fee12ee400b42df4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"eca76b5adc40aad2\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"3730c6597153632e\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"44b5e5a94128dbf8\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object))], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8aebf2ef387fde99\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Base.UUID\", :elements => Tuple{Int64, Any}[(1, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (2, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (3, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (4, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (5, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (6, (\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain)), (7, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (8, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain))], :type => :Array, :prefix_short => \"\", :objectid => \"5503ba1d55e8a052\"), MIME type application/vnd.pluto.tree+object)), (:path, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\.julia\\\\\\\\pluto_notebooks\\\\\\\\Small program.jl\\\"\", MIME type text/plain)), (:notebook_id, (\"UUID(\\\"298840f0-0e3e-11ed-1f2d-f91be6c7828b\\\")\", MIME type text/plain)), (:topology, (Dict{Symbol, Any}(:prefix => \"Pluto.NotebookTopology\", :elements => Any[(:nodes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ReactiveNode}\", :elements => Any[], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"d91f1e12b85b9ec4\"), MIME type application/vnd.pluto.tree+object)), (:codes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ExprAnalysisCache}\", :elements => Any[], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"badaca935d01da17\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableVector{Pluto.Cell}: \", :elements => Any[(1, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ebd66308db4c147a\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"b92b75f375f638d8\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"1e665eafbfb96c47\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"bb5f3bac79ab28f6\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"59be7cf28fae0306\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8cea6b7c9cc187e3\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"e706ca12d0ff6032\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e60bd32b4f045a9b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e15ec63c45af5809\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"8a703c4438a1ec4c\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"440996790b04fc1d\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"fee12ee400b42df4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"eca76b5adc40aad2\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"3730c6597153632e\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"44b5e5a94128dbf8\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object)), (4, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5f69d97541c58635\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5736c635315f64e1\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"86c7a6d990812599\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"cfa6c8d6a23f6bf2\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"34bf1a8d10e87cc1\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), (5, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"bccbbc38fc8956a7\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"79993d59f624574a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"fda7535bfe405ce8\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"272d3c5fd14c32bf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"744000b605cd5396\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), \"more\", (8, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e60f67cacf1093fe\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9f4e9de2c18f068b\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8e141ccb9f1a02f1\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ba446755f77a98f5\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"1e9db388bd3315b4\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"Pluto.ImmutableVector{Pluto.Cell}: \", :objectid => \"6e7428a84c328f83\"), MIME type application/vnd.pluto.tree+object)), (:unresolved_cells, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableSet{Pluto.Cell}\", :elements => Any[], :type => :Set, :prefix_short => \"ImmutableSet\", :objectid => \"54eba93b0e70c522\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"NotebookTopology\", :objectid => \"4e9ffe196d1e86b7\"), MIME type application/vnd.pluto.tree+object)), (:_cached_topological_order, (\"nothing\", MIME type text/plain)), (:pendingupdates, (\"Channel{Any}(1024) (empty)\", MIME type text/plain)), (:executetoken, (Dict{Symbol, Any}(:prefix => \"Pluto.Token\", :elements => Any[(:c, (\"Channel{Nothing}(1) (1 item available)\", MIME type text/plain))], :type => :struct, :prefix_short => \"Token\", :objectid => \"41067d16312467c7\"), MIME type application/vnd.pluto.tree+object)), (:compiler_options, (\"nothing\", MIME type text/plain)), (:nbpkg_ctx, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Context\", :elements => Any[(:env, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.EnvCache\", :elements => Any[(:env, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml\\\"\", MIME type text/plain)), (:project_file, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml\\\"\", MIME type text/plain)), (:manifest_file, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Manifest.toml\\\"\", MIME type text/plain)), (:pkg, (\"nothing\", MIME type text/plain)), (:project, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Project\", :elements => Any[(:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d8278a2a35d45f49\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"nothing\", MIME type text/plain)), (:uuid, (\"nothing\", MIME type text/plain)), (:version, (\"nothing\", MIME type text/plain)), (:manifest, (\"nothing\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ea09115459977029\"), MIME type application/vnd.pluto.tree+object)), (:extras, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"2135cd1f47f0e586\"), MIME type application/vnd.pluto.tree+object)), (:targets, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"58eda418b760990c\"), MIME type application/vnd.pluto.tree+object)), (:compat, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"dba27f520f99ea2\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Project\", :objectid => \"e041c026c3fdfa3a\"), MIME type application/vnd.pluto.tree+object)), (:manifest, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Manifest\", :elements => Any[(:julia_version, (\"nothing\", MIME type text/plain)), (:manifest_format, (\"v\\\"1.0.0\\\"\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pkg.Types.PackageEntry}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7198c659e8b6b94a\"), MIME type application/vnd.pluto.tree+object)), (:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"cb1d3bce9bbfa302\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Manifest\", :objectid => \"4c39cd009d999f98\"), MIME type application/vnd.pluto.tree+object)), (:original_project, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Project\", :elements => Any[(:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"29dfd8835944d04e\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"nothing\", MIME type text/plain)), (:uuid, (\"nothing\", MIME type text/plain)), (:version, (\"nothing\", MIME type text/plain)), (:manifest, (\"nothing\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7b4a72187c1a06af\"), MIME type application/vnd.pluto.tree+object)), (:extras, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e2678bd5ca5437b0\"), MIME type application/vnd.pluto.tree+object)), (:targets, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"17d762323533e9fc\"), MIME type application/vnd.pluto.tree+object)), (:compat, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b70a472a7399b18a\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Project\", :objectid => \"1fc01d1b42ea9f4a\"), MIME type application/vnd.pluto.tree+object)), (:original_manifest, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Manifest\", :elements => Any[(:julia_version, (\"nothing\", MIME type text/plain)), (:manifest_format, (\"v\\\"1.0.0\\\"\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pkg.Types.PackageEntry}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c904edcf178f01cb\"), MIME type application/vnd.pluto.tree+object)), (:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"16b3c292b2ec9d6d\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Manifest\", :objectid => \"814e64b507c2d024\"), MIME type application/vnd.pluto.tree+object)), (:uuids, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{Base.UUID}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"218b37e1489b9cee\"), MIME type application/vnd.pluto.tree+object)), (:paths, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"75401fb5700570b1\"), MIME type application/vnd.pluto.tree+object)), (:names, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"be9f61d402c3f3ed\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"EnvCache\", :objectid => \"6a46653957f72c21\"), MIME type application/vnd.pluto.tree+object)), (:io, (\"IOContext(Base.PipeEndpoint(Base.Libc.WindowsRawSocket(0xffffffffffffffff) closed, 0 bytes waiting))\", MIME type text/plain)), (:use_libgit2_for_all_downloads, (\"false\", MIME type text/plain)), (:use_only_tarballs_for_downloads, (\"false\", MIME type text/plain)), (:num_concurrent_downloads, (\"8\", MIME type text/plain)), (:graph_verbose, (\"false\", MIME type text/plain)), (:julia_version, (\"v\\\"1.6.3\\\"\", MIME type text/plain)), (:status_io, (\"nothing\", MIME type text/plain)), (:parser, (Dict{Symbol, Any}(:prefix => \"Base.TOML.Parser\", :elements => Any[(:str, (\"\\\"\\\"\", MIME type text/plain)), (:current_char, (\"'\\\\xff\\\\xff\\\\xff\\\\xff': Malformed UTF-8 (category Ma: Malformed, bad data)\", MIME type text/plain)), (:pos, (\"1\", MIME type text/plain)), (:prevpos, (\"1\", MIME type text/plain)), (:column, (\"1\", MIME type text/plain)), (:line, (\"1\", MIME type text/plain)), (:marker, (\"0\", MIME type text/plain)), (:active_table, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"288d6281d69fdf13\"), MIME type application/vnd.pluto.tree+object)), (:dotted_keys, (Dict{Symbol, Any}(:prefix => \"String\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5bebf69dbd5d062a\"), MIME type application/vnd.pluto.tree+object)), (:chunks, (Dict{Symbol, Any}(:prefix => \"UnitRange{Int64}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"7401f951ed8910e6\"), MIME type application/vnd.pluto.tree+object)), (:inline_tables, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Dict{String, Any}}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"c6386235825ccd20\"), MIME type application/vnd.pluto.tree+object)), (:static_arrays, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Any}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"9dfeb109b1e9692d\"), MIME type application/vnd.pluto.tree+object)), (:defined_tables, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Dict{String, Any}}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"37ff81ba65eb0cd8\"), MIME type application/vnd.pluto.tree+object)), (:root, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"288d6281d69fdf13\"), MIME type application/vnd.pluto.tree+object)), (:filepath, (\"nothing\", MIME type text/plain)), (:Dates, (\"Dates\", MIME type text/plain))], :type => :struct, :prefix_short => \"Parser\", :objectid => \"a58772d84d329c3e\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Context\", :objectid => \"e080b6ae4686775d\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_ctx_instantiated, (\"false\", MIME type text/plain)), (:nbpkg_restart_recommended_msg, (\"nothing\", MIME type text/plain)), (:nbpkg_restart_required_msg, (\"nothing\", MIME type text/plain)), (:nbpkg_terminal_outputs, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4b6025649c4557a0\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_busy_packages, (Dict{Symbol, Any}(:prefix => \"String\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"10d9142c27373588\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_installed_versions_cache, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"56a666c632d1deeb\"), MIME type application/vnd.pluto.tree+object)), (:process_status, (\"\\\"starting\\\"\", MIME type text/plain)), (:wants_to_interrupt, (\"false\", MIME type text/plain)), (:last_save_time, (\"1.658989566938e9\", MIME type text/plain)), (:last_hot_reload_time, (\"0.0\", MIME type text/plain)), (:bonds, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Pluto.BondValue}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4c345fae9c8ecfd8\"), MIME type application/vnd.pluto.tree+object))], :struct, \"Notebook\", \"53b544a4c2915b19\"] nb=executecode(notebook) ------ Output ------ Any[\"Notebook\", Any[(:cells_dict, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pluto.Cell}\", :elements => Any[((\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"g (generic function with 2 methods)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"924eb5cfd9a208a9\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"2b43de12804e73ed\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"feacfe33272426ef\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000007b318\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"73b9c0db03e03f15\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"50cff4143d4c5af8\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6bdb9582b8d67168\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain)), (:code, (\"\\\"g(6) + g(6,6)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"2\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"25806cd2c715940a\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"57886382d8c9201d\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ef12693187eb779c\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000006914\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5f1b1560d9cb9fcd\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8d5bc848b64d09d4\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"c245f169fb8397ef\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"b2b106e6ea4577c3\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"a160415d2953c6b0\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f17584848c93d24e\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9c78a234e2a98a68\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000abe9c4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7a2731060fe40a03\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"506cbf403c6f20a4\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"c51fdbf8320e466f\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"54728c472dc87f2d\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object))], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8aebf2ef387fde99\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Base.UUID\", :elements => Tuple{Int64, Any}[(1, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (2, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (3, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (4, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (5, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (6, (\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain)), (7, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (8, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain))], :type => :Array, :prefix_short => \"\", :objectid => \"5503ba1d55e8a052\"), MIME type application/vnd.pluto.tree+object)), (:path, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\.julia\\\\\\\\pluto_notebooks\\\\\\\\Small program.jl\\\"\", MIME type text/plain)), (:notebook_id, (\"UUID(\\\"298840f0-0e3e-11ed-1f2d-f91be6c7828b\\\")\", MIME type text/plain)), (:topology, (Dict{Symbol, Any}(:prefix => \"Pluto.NotebookTopology\", :elements => Any[(:nodes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ReactiveNode}\", :elements => Any[((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"d3c727bb8a54a668\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"367dbe4a59d1c6c2\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"45c64a0e2b59c3f5\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"7f90bea5e4dd6ba8\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"18717bc94bb88dbd\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"fab6f6bdc43bfeeb\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"2de3855720e0e2e9\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"b650278e8344a3e8\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"9c3fb20ad3d8fdf4\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"fae31c04aef19dd3\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"524cad30bba0f329\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"5862b3b706da3c29\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"416dd8ef5506e8a4\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"bc6c80b2067e4f7d\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"a7b21a5c66c84cbd\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"2160c4e8862b172b\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"c831a69703751c31\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"ab9c8cae84f6f057\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"5fc715a48ae54a98\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"e65b9653ebfd76f4\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"8c1c00b2fb6d1bc5\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"2af7c152295c5531\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"d3fffa4972357746\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"d91562c4f58011ab\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"62b1f06ea8174153\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"eccac6737f6b3617\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"a0207ae39b786604\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"c459a7aafc3cdd59\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"a160415d2953c6b0\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f17584848c93d24e\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9c78a234e2a98a68\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000abe9c4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7a2731060fe40a03\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"506cbf403c6f20a4\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"c51fdbf8320e466f\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"54728c472dc87f2d\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"5e77f20b5572065b\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"bd39a63457c9ff14\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"73f0c73a0ad8a3ec\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"3fbc05fea39b4e33\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"de0f041f8beff97b\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"cd504d2d21abd0af\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"490836253ba50225\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"741a80716bb97aff\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"2c1f0549ed1ced4c\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"d19d0fe387aea7a\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"fc0fd275fc75d288\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"ebc504206fcbdd82\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"532e591e109a5c4e\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"38894a5695a8c850\"), MIME type application/vnd.pluto.tree+object)), \"more\"], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"96c5bb049cb3d00f\"), MIME type application/vnd.pluto.tree+object)), (:codes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ExprAnalysisCache}\", :elements => Any[((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297e2ed0-0e3e-11ed-2ce5-e516119b6875:1 =#), :(x = 1))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"7d668b27f4c65315\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"883047c0c7b4991\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"3c0765568b5cfd9\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"true\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"c40c33b5dc8f38f6\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1:1 =#), :(f(x) = begin\\n #= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1:1 =#\\n x + y\\n end))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"9fc8ae7bdd6d2d54\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"5655800061c0fc42\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"22c252decaebcb29\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"false\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"ddeb0f1a055b56e3\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-10d9-918f8a9a11ce:1 =#), :(f(4)))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"f877b5e81cb6440b\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"4f838e72cb41a99d\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"3a8993bbaddb7bb2\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"true\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"cd716111f74b726f\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-2628-ad5a1313cf64:1 =#), :(Distributed.myid()))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"a1234efd843e2ba9\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"c1b923fd51aad04f\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"791ae4514912af39\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"true\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"ca7d8872efe4ffcb\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"a160415d2953c6b0\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f17584848c93d24e\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9c78a234e2a98a68\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000abe9c4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7a2731060fe40a03\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"506cbf403c6f20a4\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"c51fdbf8320e466f\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"54728c472dc87f2d\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-25eb-351950934271:1 =#), :(import Distributed))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"5357ed4157660ba5\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"235fdc8f2b8a47cf\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"b9f1aae2bb3fde7e\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"false\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"6eb600efea654099\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-3722-a31bc888229b:1 =#), :(y = x))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"523c7eca92d74877\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"79082241ff0fef34\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"e9f927fd1a209c5f\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"true\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"a17b6b9fa50ab5bb\"), MIME type application/vnd.pluto.tree+object)), \"more\"], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"81fc80301dac473a\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableVector{Pluto.Cell}: \", :elements => Any[(1, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object)), (4, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), (5, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"g (generic function with 2 methods)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"924eb5cfd9a208a9\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"2b43de12804e73ed\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"feacfe33272426ef\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000007b318\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"73b9c0db03e03f15\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"50cff4143d4c5af8\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6bdb9582b8d67168\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), \"more\", (8, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"Pluto.ImmutableVector{Pluto.Cell}: \", :objectid => \"6e7428a84c328f83\"), MIME type application/vnd.pluto.tree+object)), (:unresolved_cells, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableSet{Pluto.Cell}\", :elements => Any[], :type => :Set, :prefix_short => \"ImmutableSet\", :objectid => \"49dfc5a3aafbefe5\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"NotebookTopology\", :objectid => \"492f4549a584df08\"), MIME type application/vnd.pluto.tree+object)), (:_cached_topological_order, (Dict{Symbol, Any}(:prefix => \"Pluto.TopologicalOrder\", :elements => Any[(:input_topology, (Dict{Symbol, Any}(:prefix => \"Pluto.NotebookTopology\", :elements => Any[(:nodes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ReactiveNode}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"96c5bb049cb3d00f\"), MIME type application/vnd.pluto.tree+object)), (:codes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ExprAnalysisCache}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"81fc80301dac473a\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableVector{Pluto.Cell}: \", :elements => Any[\"more\"], :type => :Array, :prefix_short => \"Pluto.ImmutableVector{Pluto.Cell}: \", :objectid => \"6e7428a84c328f83\"), MIME type application/vnd.pluto.tree+object)), (:unresolved_cells, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableSet{Pluto.Cell}\", :elements => Any[], :type => :Set, :prefix_short => \"ImmutableSet\", :objectid => \"49dfc5a3aafbefe5\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"NotebookTopology\", :objectid => \"492f4549a584df08\"), MIME type application/vnd.pluto.tree+object)), (:runnable, (Dict{Symbol, Any}(:prefix => \"Pluto.Cell\", :elements => Any[(1, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object)), (4, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), (5, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"g (generic function with 2 methods)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"924eb5cfd9a208a9\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"2b43de12804e73ed\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"feacfe33272426ef\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000007b318\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"73b9c0db03e03f15\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"50cff4143d4c5af8\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6bdb9582b8d67168\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), \"more\", (8, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"\", :objectid => \"9a6d710554df01e9\"), MIME type application/vnd.pluto.tree+object)), (:errable, (Dict{Symbol, Any}(:prefix => \"Dict{Pluto.Cell, Pluto.ReactivityError}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4c1a028ab081c411\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"TopologicalOrder\", :objectid => \"677bbbb10df72cdd\"), MIME type application/vnd.pluto.tree+object)), (:pendingupdates, (\"Channel{Any}(1024) (empty)\", MIME type text/plain)), (:executetoken, (Dict{Symbol, Any}(:prefix => \"Pluto.Token\", :elements => Any[(:c, (\"Channel{Nothing}(1) (1 item available)\", MIME type text/plain))], :type => :struct, :prefix_short => \"Token\", :objectid => \"41067d16312467c7\"), MIME type application/vnd.pluto.tree+object)), (:compiler_options, (\"nothing\", MIME type text/plain)), (:nbpkg_ctx, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Context\", :elements => Any[(:env, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.EnvCache\", :elements => Any[(:env, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml\\\"\", MIME type text/plain)), (:project_file, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml\\\"\", MIME type text/plain)), (:manifest_file, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Manifest.toml\\\"\", MIME type text/plain)), (:pkg, (\"nothing\", MIME type text/plain)), (:project, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Project\", :elements => Any[(:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"279b16067305cc21\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"nothing\", MIME type text/plain)), (:uuid, (\"nothing\", MIME type text/plain)), (:version, (\"nothing\", MIME type text/plain)), (:manifest, (\"nothing\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f623c6ab10170933\"), MIME type application/vnd.pluto.tree+object)), (:extras, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"fcd8de839d813600\"), MIME type application/vnd.pluto.tree+object)), (:targets, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"57afb931532ef5ae\"), MIME type application/vnd.pluto.tree+object)), (:compat, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c685634bca01f12\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Project\", :objectid => \"3e2a98761e0af5fc\"), MIME type application/vnd.pluto.tree+object)), (:manifest, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Manifest\", :elements => Any[(:julia_version, (\"nothing\", MIME type text/plain)), (:manifest_format, (\"v\\\"1.0.0\\\"\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pkg.Types.PackageEntry}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7467fc2feb04933a\"), MIME type application/vnd.pluto.tree+object)), (:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"46e92d3f31a1904e\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Manifest\", :objectid => \"d9f893335184ff08\"), MIME type application/vnd.pluto.tree+object)), (:original_project, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Project\", :elements => Any[(:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"320a49cc0054c524\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"nothing\", MIME type text/plain)), (:uuid, (\"nothing\", MIME type text/plain)), (:version, (\"nothing\", MIME type text/plain)), (:manifest, (\"nothing\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"1aaacc335195cc4f\"), MIME type application/vnd.pluto.tree+object)), (:extras, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"3d254e97968ad22b\"), MIME type application/vnd.pluto.tree+object)), (:targets, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"afa35941fb86ed46\"), MIME type application/vnd.pluto.tree+object)), (:compat, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"650f362be65ea827\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Project\", :objectid => \"6f35723d543b7205\"), MIME type application/vnd.pluto.tree+object)), (:original_manifest, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Manifest\", :elements => Any[(:julia_version, (\"nothing\", MIME type text/plain)), (:manifest_format, (\"v\\\"1.0.0\\\"\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pkg.Types.PackageEntry}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4cf5722fb62b228f\"), MIME type application/vnd.pluto.tree+object)), (:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5eddd42d59fe097e\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Manifest\", :objectid => \"9f2c84ec3e5a86c2\"), MIME type application/vnd.pluto.tree+object)), (:uuids, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{Base.UUID}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5d07caa8dddc0fd1\"), MIME type application/vnd.pluto.tree+object)), (:paths, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"58dd82f255877e94\"), MIME type application/vnd.pluto.tree+object)), (:names, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e7a16043f30f3791\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"EnvCache\", :objectid => \"7818092211dc80ff\"), MIME type application/vnd.pluto.tree+object)), (:io, (\"IOContext(Base.PipeEndpoint(Base.Libc.WindowsRawSocket(0xffffffffffffffff) closed, 0 bytes waiting))\", MIME type text/plain)), (:use_libgit2_for_all_downloads, (\"false\", MIME type text/plain)), (:use_only_tarballs_for_downloads, (\"false\", MIME type text/plain)), (:num_concurrent_downloads, (\"8\", MIME type text/plain)), (:graph_verbose, (\"false\", MIME type text/plain)), (:julia_version, (\"v\\\"1.6.3\\\"\", MIME type text/plain)), (:status_io, (\"nothing\", MIME type text/plain)), (:parser, (Dict{Symbol, Any}(:prefix => \"Base.TOML.Parser\", :elements => Any[(:str, (\"\\\"\\\"\", MIME type text/plain)), (:current_char, (\"'\\\\xff\\\\xff\\\\xff\\\\xff': Malformed UTF-8 (category Ma: Malformed, bad data)\", MIME type text/plain)), (:pos, (\"1\", MIME type text/plain)), (:prevpos, (\"1\", MIME type text/plain)), (:column, (\"1\", MIME type text/plain)), (:line, (\"1\", MIME type text/plain)), (:marker, (\"0\", MIME type text/plain)), (:active_table, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4ab1bbcd392fc7ea\"), MIME type application/vnd.pluto.tree+object)), (:dotted_keys, (Dict{Symbol, Any}(:prefix => \"String\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"51e25f21c7910ca7\"), MIME type application/vnd.pluto.tree+object)), (:chunks, (Dict{Symbol, Any}(:prefix => \"UnitRange{Int64}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"836015a52a8c76cd\"), MIME type application/vnd.pluto.tree+object)), (:inline_tables, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Dict{String, Any}}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"ffcd9a2828c4ef35\"), MIME type application/vnd.pluto.tree+object)), (:static_arrays, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Any}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"c12d1b7cab83f183\"), MIME type application/vnd.pluto.tree+object)), (:defined_tables, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Dict{String, Any}}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"3219feeb8d5db6bb\"), MIME type application/vnd.pluto.tree+object)), (:root, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4ab1bbcd392fc7ea\"), MIME type application/vnd.pluto.tree+object)), (:filepath, (\"nothing\", MIME type text/plain)), (:Dates, (\"Dates\", MIME type text/plain))], :type => :struct, :prefix_short => \"Parser\", :objectid => \"8a38ed5cbc6f4f0c\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Context\", :objectid => \"6307c75b69dbd8a6\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_ctx_instantiated, (\"true\", MIME type text/plain)), (:nbpkg_restart_recommended_msg, (\"nothing\", MIME type text/plain)), (:nbpkg_restart_required_msg, (\"nothing\", MIME type text/plain)), (:nbpkg_terminal_outputs, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[((\"\\\"Distributed\\\"\", MIME type text/plain), (\"\\\"\\\\e[32m\\\\e[1m No Changes\\\\e[22m\\\\e[39m to `C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml`\\\\n\\\\e[32m\\\\e[1m No Changes\\\\e[22m\\\\e[39m to `C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Manifest.toml`\\\\n\\\\e[32m\\\\e[1mLoading\\\\e[22m\\\\e[39m packages...\\\\n\\\"\", MIME type text/plain))], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4b6025649c4557a0\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_busy_packages, (Dict{Symbol, Any}(:prefix => \"String\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"c965e775902cd86c\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_installed_versions_cache, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[((\"\\\"Distributed\\\"\", MIME type text/plain), (\"\\\"stdlib\\\"\", MIME type text/plain))], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"55b68b00817d514\"), MIME type application/vnd.pluto.tree+object)), (:process_status, (\"\\\"ready\\\"\", MIME type text/plain)), (:wants_to_interrupt, (\"false\", MIME type text/plain)), (:last_save_time, (\"1.658989566938e9\", MIME type text/plain)), (:last_hot_reload_time, (\"0.0\", MIME type text/plain)), (:bonds, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Pluto.BondValue}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4c345fae9c8ecfd8\"), MIME type application/vnd.pluto.tree+object))], :struct, \"Notebook\", \"53b544a4c2915b19\"] #noop @test nb.cells[4].output.body == \"5\" ------ Output ------ executecode(nb::Notebook)\u2013> This function does the following Take a notebook. Create a fake server, fake client etc. Run the notebook cell by cell and update the notebook with the output. source","title":"Coderunner"},{"location":"coderunner/#executecode","text":"notebook = Notebook([ Cell(\"x = 1\"), Cell(\"y = x\"), Cell(\"f(x) = x + y\"), Cell(\"f(4)\"), Cell(\"\"\"begin g(a) = x g(a,b) = y end\"\"\"), Cell(\"g(6) + g(6,6)\"), Cell(\"import Distributed\"), Cell(\"Distributed.myid()\"), ]) ------ Output ------ Any[\"Notebook\", Any[(:cells_dict, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pluto.Cell}\", :elements => Any[((\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"bccbbc38fc8956a7\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"79993d59f624574a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"fda7535bfe405ce8\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"272d3c5fd14c32bf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"744000b605cd5396\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain)), (:code, (\"\\\"g(6) + g(6,6)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f595e353ee1d7efc\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"af88bb16e203336f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"15837b24adf8b099\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4a49eb581785935f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"7f330f0b2f575cb7\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"b2b106e6ea4577c3\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5f69d97541c58635\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5736c635315f64e1\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"86c7a6d990812599\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"cfa6c8d6a23f6bf2\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"34bf1a8d10e87cc1\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e60f67cacf1093fe\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9f4e9de2c18f068b\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8e141ccb9f1a02f1\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ba446755f77a98f5\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"1e9db388bd3315b4\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"cd1532e09d1c277a\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5abb5b883868785b\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6b504e285992618b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"81ebf22406c9aa72\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f3e00075dbb56f15\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"54728c472dc87f2d\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ebd66308db4c147a\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"b92b75f375f638d8\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"1e665eafbfb96c47\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"bb5f3bac79ab28f6\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"59be7cf28fae0306\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8cea6b7c9cc187e3\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"e706ca12d0ff6032\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e60bd32b4f045a9b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e15ec63c45af5809\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"8a703c4438a1ec4c\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"440996790b04fc1d\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"fee12ee400b42df4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"eca76b5adc40aad2\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"3730c6597153632e\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"44b5e5a94128dbf8\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object))], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8aebf2ef387fde99\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Base.UUID\", :elements => Tuple{Int64, Any}[(1, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (2, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (3, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (4, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (5, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (6, (\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain)), (7, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (8, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain))], :type => :Array, :prefix_short => \"\", :objectid => \"5503ba1d55e8a052\"), MIME type application/vnd.pluto.tree+object)), (:path, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\.julia\\\\\\\\pluto_notebooks\\\\\\\\Small program.jl\\\"\", MIME type text/plain)), (:notebook_id, (\"UUID(\\\"298840f0-0e3e-11ed-1f2d-f91be6c7828b\\\")\", MIME type text/plain)), (:topology, (Dict{Symbol, Any}(:prefix => \"Pluto.NotebookTopology\", :elements => Any[(:nodes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ReactiveNode}\", :elements => Any[], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"d91f1e12b85b9ec4\"), MIME type application/vnd.pluto.tree+object)), (:codes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ExprAnalysisCache}\", :elements => Any[], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"badaca935d01da17\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableVector{Pluto.Cell}: \", :elements => Any[(1, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ebd66308db4c147a\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"b92b75f375f638d8\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"1e665eafbfb96c47\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"bb5f3bac79ab28f6\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"59be7cf28fae0306\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8cea6b7c9cc187e3\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"e706ca12d0ff6032\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e60bd32b4f045a9b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e15ec63c45af5809\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"8a703c4438a1ec4c\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"440996790b04fc1d\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"fee12ee400b42df4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"eca76b5adc40aad2\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"3730c6597153632e\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"44b5e5a94128dbf8\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object)), (4, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5f69d97541c58635\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5736c635315f64e1\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"86c7a6d990812599\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"cfa6c8d6a23f6bf2\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"34bf1a8d10e87cc1\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), (5, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"bccbbc38fc8956a7\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"79993d59f624574a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"fda7535bfe405ce8\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"272d3c5fd14c32bf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"744000b605cd5396\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), \"more\", (8, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"nothing\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"0.0\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"5b7305c79d4f4b3\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e60f67cacf1093fe\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9f4e9de2c18f068b\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"nothing\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8e141ccb9f1a02f1\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ba446755f77a98f5\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"99\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"1e9db388bd3315b4\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"Pluto.ImmutableVector{Pluto.Cell}: \", :objectid => \"6e7428a84c328f83\"), MIME type application/vnd.pluto.tree+object)), (:unresolved_cells, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableSet{Pluto.Cell}\", :elements => Any[], :type => :Set, :prefix_short => \"ImmutableSet\", :objectid => \"54eba93b0e70c522\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"NotebookTopology\", :objectid => \"4e9ffe196d1e86b7\"), MIME type application/vnd.pluto.tree+object)), (:_cached_topological_order, (\"nothing\", MIME type text/plain)), (:pendingupdates, (\"Channel{Any}(1024) (empty)\", MIME type text/plain)), (:executetoken, (Dict{Symbol, Any}(:prefix => \"Pluto.Token\", :elements => Any[(:c, (\"Channel{Nothing}(1) (1 item available)\", MIME type text/plain))], :type => :struct, :prefix_short => \"Token\", :objectid => \"41067d16312467c7\"), MIME type application/vnd.pluto.tree+object)), (:compiler_options, (\"nothing\", MIME type text/plain)), (:nbpkg_ctx, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Context\", :elements => Any[(:env, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.EnvCache\", :elements => Any[(:env, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml\\\"\", MIME type text/plain)), (:project_file, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml\\\"\", MIME type text/plain)), (:manifest_file, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Manifest.toml\\\"\", MIME type text/plain)), (:pkg, (\"nothing\", MIME type text/plain)), (:project, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Project\", :elements => Any[(:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d8278a2a35d45f49\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"nothing\", MIME type text/plain)), (:uuid, (\"nothing\", MIME type text/plain)), (:version, (\"nothing\", MIME type text/plain)), (:manifest, (\"nothing\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"ea09115459977029\"), MIME type application/vnd.pluto.tree+object)), (:extras, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"2135cd1f47f0e586\"), MIME type application/vnd.pluto.tree+object)), (:targets, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"58eda418b760990c\"), MIME type application/vnd.pluto.tree+object)), (:compat, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"dba27f520f99ea2\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Project\", :objectid => \"e041c026c3fdfa3a\"), MIME type application/vnd.pluto.tree+object)), (:manifest, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Manifest\", :elements => Any[(:julia_version, (\"nothing\", MIME type text/plain)), (:manifest_format, (\"v\\\"1.0.0\\\"\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pkg.Types.PackageEntry}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7198c659e8b6b94a\"), MIME type application/vnd.pluto.tree+object)), (:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"cb1d3bce9bbfa302\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Manifest\", :objectid => \"4c39cd009d999f98\"), MIME type application/vnd.pluto.tree+object)), (:original_project, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Project\", :elements => Any[(:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"29dfd8835944d04e\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"nothing\", MIME type text/plain)), (:uuid, (\"nothing\", MIME type text/plain)), (:version, (\"nothing\", MIME type text/plain)), (:manifest, (\"nothing\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7b4a72187c1a06af\"), MIME type application/vnd.pluto.tree+object)), (:extras, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e2678bd5ca5437b0\"), MIME type application/vnd.pluto.tree+object)), (:targets, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"17d762323533e9fc\"), MIME type application/vnd.pluto.tree+object)), (:compat, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b70a472a7399b18a\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Project\", :objectid => \"1fc01d1b42ea9f4a\"), MIME type application/vnd.pluto.tree+object)), (:original_manifest, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Manifest\", :elements => Any[(:julia_version, (\"nothing\", MIME type text/plain)), (:manifest_format, (\"v\\\"1.0.0\\\"\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pkg.Types.PackageEntry}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c904edcf178f01cb\"), MIME type application/vnd.pluto.tree+object)), (:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"16b3c292b2ec9d6d\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Manifest\", :objectid => \"814e64b507c2d024\"), MIME type application/vnd.pluto.tree+object)), (:uuids, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{Base.UUID}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"218b37e1489b9cee\"), MIME type application/vnd.pluto.tree+object)), (:paths, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"75401fb5700570b1\"), MIME type application/vnd.pluto.tree+object)), (:names, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"be9f61d402c3f3ed\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"EnvCache\", :objectid => \"6a46653957f72c21\"), MIME type application/vnd.pluto.tree+object)), (:io, (\"IOContext(Base.PipeEndpoint(Base.Libc.WindowsRawSocket(0xffffffffffffffff) closed, 0 bytes waiting))\", MIME type text/plain)), (:use_libgit2_for_all_downloads, (\"false\", MIME type text/plain)), (:use_only_tarballs_for_downloads, (\"false\", MIME type text/plain)), (:num_concurrent_downloads, (\"8\", MIME type text/plain)), (:graph_verbose, (\"false\", MIME type text/plain)), (:julia_version, (\"v\\\"1.6.3\\\"\", MIME type text/plain)), (:status_io, (\"nothing\", MIME type text/plain)), (:parser, (Dict{Symbol, Any}(:prefix => \"Base.TOML.Parser\", :elements => Any[(:str, (\"\\\"\\\"\", MIME type text/plain)), (:current_char, (\"'\\\\xff\\\\xff\\\\xff\\\\xff': Malformed UTF-8 (category Ma: Malformed, bad data)\", MIME type text/plain)), (:pos, (\"1\", MIME type text/plain)), (:prevpos, (\"1\", MIME type text/plain)), (:column, (\"1\", MIME type text/plain)), (:line, (\"1\", MIME type text/plain)), (:marker, (\"0\", MIME type text/plain)), (:active_table, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"288d6281d69fdf13\"), MIME type application/vnd.pluto.tree+object)), (:dotted_keys, (Dict{Symbol, Any}(:prefix => \"String\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5bebf69dbd5d062a\"), MIME type application/vnd.pluto.tree+object)), (:chunks, (Dict{Symbol, Any}(:prefix => \"UnitRange{Int64}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"7401f951ed8910e6\"), MIME type application/vnd.pluto.tree+object)), (:inline_tables, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Dict{String, Any}}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"c6386235825ccd20\"), MIME type application/vnd.pluto.tree+object)), (:static_arrays, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Any}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"9dfeb109b1e9692d\"), MIME type application/vnd.pluto.tree+object)), (:defined_tables, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Dict{String, Any}}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"37ff81ba65eb0cd8\"), MIME type application/vnd.pluto.tree+object)), (:root, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"288d6281d69fdf13\"), MIME type application/vnd.pluto.tree+object)), (:filepath, (\"nothing\", MIME type text/plain)), (:Dates, (\"Dates\", MIME type text/plain))], :type => :struct, :prefix_short => \"Parser\", :objectid => \"a58772d84d329c3e\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Context\", :objectid => \"e080b6ae4686775d\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_ctx_instantiated, (\"false\", MIME type text/plain)), (:nbpkg_restart_recommended_msg, (\"nothing\", MIME type text/plain)), (:nbpkg_restart_required_msg, (\"nothing\", MIME type text/plain)), (:nbpkg_terminal_outputs, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4b6025649c4557a0\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_busy_packages, (Dict{Symbol, Any}(:prefix => \"String\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"10d9142c27373588\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_installed_versions_cache, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"56a666c632d1deeb\"), MIME type application/vnd.pluto.tree+object)), (:process_status, (\"\\\"starting\\\"\", MIME type text/plain)), (:wants_to_interrupt, (\"false\", MIME type text/plain)), (:last_save_time, (\"1.658989566938e9\", MIME type text/plain)), (:last_hot_reload_time, (\"0.0\", MIME type text/plain)), (:bonds, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Pluto.BondValue}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4c345fae9c8ecfd8\"), MIME type application/vnd.pluto.tree+object))], :struct, \"Notebook\", \"53b544a4c2915b19\"] nb=executecode(notebook) ------ Output ------ Any[\"Notebook\", Any[(:cells_dict, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pluto.Cell}\", :elements => Any[((\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"g (generic function with 2 methods)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"924eb5cfd9a208a9\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"2b43de12804e73ed\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"feacfe33272426ef\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000007b318\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"73b9c0db03e03f15\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"50cff4143d4c5af8\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6bdb9582b8d67168\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain)), (:code, (\"\\\"g(6) + g(6,6)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"2\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"25806cd2c715940a\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"57886382d8c9201d\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ef12693187eb779c\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000006914\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5f1b1560d9cb9fcd\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8d5bc848b64d09d4\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"c245f169fb8397ef\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"b2b106e6ea4577c3\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"a160415d2953c6b0\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f17584848c93d24e\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9c78a234e2a98a68\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000abe9c4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7a2731060fe40a03\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"506cbf403c6f20a4\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"c51fdbf8320e466f\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"54728c472dc87f2d\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), ((\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain), (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object))], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"8aebf2ef387fde99\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Base.UUID\", :elements => Tuple{Int64, Any}[(1, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (2, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (3, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (4, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (5, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (6, (\"UUID(\\\"297f4040-0e3e-11ed-29d3-09518b668235\\\")\", MIME type text/plain)), (7, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (8, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain))], :type => :Array, :prefix_short => \"\", :objectid => \"5503ba1d55e8a052\"), MIME type application/vnd.pluto.tree+object)), (:path, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\.julia\\\\\\\\pluto_notebooks\\\\\\\\Small program.jl\\\"\", MIME type text/plain)), (:notebook_id, (\"UUID(\\\"298840f0-0e3e-11ed-1f2d-f91be6c7828b\\\")\", MIME type text/plain)), (:topology, (Dict{Symbol, Any}(:prefix => \"Pluto.NotebookTopology\", :elements => Any[(:nodes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ReactiveNode}\", :elements => Any[((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"d3c727bb8a54a668\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"367dbe4a59d1c6c2\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"45c64a0e2b59c3f5\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"7f90bea5e4dd6ba8\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"18717bc94bb88dbd\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"fab6f6bdc43bfeeb\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"2de3855720e0e2e9\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"b650278e8344a3e8\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"9c3fb20ad3d8fdf4\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"fae31c04aef19dd3\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"524cad30bba0f329\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"5862b3b706da3c29\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"416dd8ef5506e8a4\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"bc6c80b2067e4f7d\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"a7b21a5c66c84cbd\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"2160c4e8862b172b\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"c831a69703751c31\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"ab9c8cae84f6f057\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"5fc715a48ae54a98\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"e65b9653ebfd76f4\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"8c1c00b2fb6d1bc5\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"2af7c152295c5531\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"d3fffa4972357746\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"d91562c4f58011ab\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"62b1f06ea8174153\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"eccac6737f6b3617\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"a0207ae39b786604\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"c459a7aafc3cdd59\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"a160415d2953c6b0\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f17584848c93d24e\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9c78a234e2a98a68\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000abe9c4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7a2731060fe40a03\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"506cbf403c6f20a4\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"c51fdbf8320e466f\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"54728c472dc87f2d\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"5e77f20b5572065b\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"bd39a63457c9ff14\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"73f0c73a0ad8a3ec\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"3fbc05fea39b4e33\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"de0f041f8beff97b\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"cd504d2d21abd0af\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"490836253ba50225\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ReactiveNode\", :elements => Any[(:references, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"741a80716bb97aff\"), MIME type application/vnd.pluto.tree+object)), (:definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"2c1f0549ed1ced4c\"), MIME type application/vnd.pluto.tree+object)), (:soft_definitions, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"d19d0fe387aea7a\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_with_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Pluto.ExpressionExplorer.FunctionNameSignaturePair}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"fc0fd275fc75d288\"), MIME type application/vnd.pluto.tree+object)), (:funcdefs_without_signatures, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"ebc504206fcbdd82\"), MIME type application/vnd.pluto.tree+object)), (:macrocalls, (Dict{Symbol, Any}(:prefix => \"Set{Symbol}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"532e591e109a5c4e\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"ReactiveNode\", :objectid => \"38894a5695a8c850\"), MIME type application/vnd.pluto.tree+object)), \"more\"], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"96c5bb049cb3d00f\"), MIME type application/vnd.pluto.tree+object)), (:codes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ExprAnalysisCache}\", :elements => Any[((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297e2ed0-0e3e-11ed-2ce5-e516119b6875:1 =#), :(x = 1))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"7d668b27f4c65315\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"883047c0c7b4991\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"3c0765568b5cfd9\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"true\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"c40c33b5dc8f38f6\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1:1 =#), :(f(x) = begin\\n #= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1:1 =#\\n x + y\\n end))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"9fc8ae7bdd6d2d54\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"5655800061c0fc42\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"22c252decaebcb29\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"false\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"ddeb0f1a055b56e3\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-10d9-918f8a9a11ce:1 =#), :(f(4)))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"f877b5e81cb6440b\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"4f838e72cb41a99d\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"3a8993bbaddb7bb2\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"true\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"cd716111f74b726f\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-2628-ad5a1313cf64:1 =#), :(Distributed.myid()))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"a1234efd843e2ba9\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"c1b923fd51aad04f\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"791ae4514912af39\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"true\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"ca7d8872efe4ffcb\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-25eb-351950934271\\\")\", MIME type text/plain)), (:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"a160415d2953c6b0\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f17584848c93d24e\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"9c78a234e2a98a68\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000abe9c4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7a2731060fe40a03\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"506cbf403c6f20a4\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"c51fdbf8320e466f\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"54728c472dc87f2d\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"import Distributed\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-25eb-351950934271:1 =#), :(import Distributed))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"5357ed4157660ba5\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[\"more\"], :type => :Set, :prefix_short => \"Set\", :objectid => \"235fdc8f2b8a47cf\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"b9f1aae2bb3fde7e\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"false\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"6eb600efea654099\"), MIME type application/vnd.pluto.tree+object)), ((Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object), (Dict{Symbol, Any}(:prefix => \"ExprAnalysisCache\", :elements => Any[(:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:parsedcode, (\":(\\$(Expr(:toplevel, :(#= C:\\\\Users\\\\family\\\\.julia\\\\pluto_notebooks\\\\Small program.jl#==#297f4040-0e3e-11ed-3722-a31bc888229b:1 =#), :(y = x))))\", MIME type text/plain)), (:module_usings_imports, (Dict{Symbol, Any}(:prefix => \"UsingsImports\", :elements => Any[(:usings, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"523c7eca92d74877\"), MIME type application/vnd.pluto.tree+object)), (:imports, (Dict{Symbol, Any}(:prefix => \"Set{Expr}\", :elements => Any[], :type => :Set, :prefix_short => \"Set\", :objectid => \"79082241ff0fef34\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"UsingsImports\", :objectid => \"e9f927fd1a209c5f\"), MIME type application/vnd.pluto.tree+object)), (:function_wrapped, (\"true\", MIME type text/plain)), (:forced_expr_id, (\"nothing\", MIME type text/plain))], :type => :struct, :prefix_short => \"ExprAnalysisCache\", :objectid => \"a17b6b9fa50ab5bb\"), MIME type application/vnd.pluto.tree+object)), \"more\"], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"81fc80301dac473a\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableVector{Pluto.Cell}: \", :elements => Any[(1, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object)), (4, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), (5, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"g (generic function with 2 methods)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"924eb5cfd9a208a9\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"2b43de12804e73ed\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"feacfe33272426ef\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000007b318\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"73b9c0db03e03f15\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"50cff4143d4c5af8\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6bdb9582b8d67168\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), \"more\", (8, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"Pluto.ImmutableVector{Pluto.Cell}: \", :objectid => \"6e7428a84c328f83\"), MIME type application/vnd.pluto.tree+object)), (:unresolved_cells, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableSet{Pluto.Cell}\", :elements => Any[], :type => :Set, :prefix_short => \"ImmutableSet\", :objectid => \"49dfc5a3aafbefe5\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"NotebookTopology\", :objectid => \"492f4549a584df08\"), MIME type application/vnd.pluto.tree+object)), (:_cached_topological_order, (Dict{Symbol, Any}(:prefix => \"Pluto.TopologicalOrder\", :elements => Any[(:input_topology, (Dict{Symbol, Any}(:prefix => \"Pluto.NotebookTopology\", :elements => Any[(:nodes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ReactiveNode}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"96c5bb049cb3d00f\"), MIME type application/vnd.pluto.tree+object)), (:codes, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableDefaultDict{Pluto.Cell, Pluto.ExprAnalysisCache}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"ImmutableDefaultDict\", :objectid => \"81fc80301dac473a\"), MIME type application/vnd.pluto.tree+object)), (:cell_order, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableVector{Pluto.Cell}: \", :elements => Any[\"more\"], :type => :Array, :prefix_short => \"Pluto.ImmutableVector{Pluto.Cell}: \", :objectid => \"6e7428a84c328f83\"), MIME type application/vnd.pluto.tree+object)), (:unresolved_cells, (Dict{Symbol, Any}(:prefix => \"Pluto.ImmutableSet{Pluto.Cell}\", :elements => Any[], :type => :Set, :prefix_short => \"ImmutableSet\", :objectid => \"49dfc5a3aafbefe5\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"NotebookTopology\", :objectid => \"492f4549a584df08\"), MIME type application/vnd.pluto.tree+object)), (:runnable, (Dict{Symbol, Any}(:prefix => \"Pluto.Cell\", :elements => Any[(1, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297e2ed0-0e3e-11ed-2ce5-e516119b6875\\\")\", MIME type text/plain)), (:code, (\"\\\"x = 1\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":x\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"faa8abba421c2a3b\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"47b05bc62eae4088\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d94219ab57dd2ea4\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x00000000000078b4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d57f582ec696677b\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"104871ba3c2894c1\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"f99b7e45c2031fbe\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"7bd029ddfc83d502\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3722-a31bc888229b\\\")\", MIME type text/plain)), (:code, (\"\\\"y = x\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"1\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\":y\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"b3f9577b130b6f62\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c210439b863a7ff4\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"a28472fb637af365\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000003bc4\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"af2eaa3179f50149\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e8610192ec59d87f\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"af96f93179f1710a\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"312fefd567435b3a\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-3aaf-2dd9b80e3ad1\\\")\", MIME type text/plain)), (:code, (\"\\\"f(x) = x + y\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"f (generic function with 1 method)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"8f113c936f5315d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"77c6514271760fff\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"d49f7cdaab5b9046\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000004cdb0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"48d162802d3a8bf0\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f2f4dd0b9f65e1a\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"5afc4053f90dfe23\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"83ad58168c3e3a5f\"), MIME type application/vnd.pluto.tree+object)), (4, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-10d9-918f8a9a11ce\\\")\", MIME type text/plain)), (:code, (\"\\\"f(4)\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"5\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"c694eaf29696a88d\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"9d7ba06a64c1810f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"5cb91e0a39d7962f\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x0000000000002ee0\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"d5da372c4749ffd6\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b5df362c8753fccf\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"d60e21b464c958f9\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"36f74d69f2d22443\"), MIME type application/vnd.pluto.tree+object)), (5, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-0650-39561e495cea\\\")\", MIME type text/plain)), (:code, (\"\\\"begin\\\\n g(a) = x\\\\n g(a,b) = y \\\\nend\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"g (generic function with 2 methods)\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"924eb5cfd9a208a9\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"2b43de12804e73ed\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"feacfe33272426ef\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000007b318\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"73b9c0db03e03f15\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"50cff4143d4c5af8\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6bdb9582b8d67168\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"35e0b40070a4d314\"), MIME type application/vnd.pluto.tree+object)), \"more\", (8, (Dict{Symbol, Any}(:prefix => \"Cell\", :elements => Any[(:cell_id, (\"UUID(\\\"297f4040-0e3e-11ed-2628-ad5a1313cf64\\\")\", MIME type text/plain)), (:code, (\"\\\"Distributed.myid()\\\"\", MIME type text/plain)), (:code_folded, (\"false\", MIME type text/plain)), (:output, (Dict{Symbol, Any}(:prefix => \"CellOutput\", :elements => Any[(:body, (\"\\\"6\\\"\", MIME type text/plain)), (:mime, (\"MIME type text/plain\", MIME type text/plain)), (:rootassignee, (\"nothing\", MIME type text/plain)), (:last_run_timestamp, (\"1.65899e9\", MIME type text/plain)), (:persist_js_state, (\"false\", MIME type text/plain)), (:has_pluto_hook_features, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellOutput\", :objectid => \"d8fa031c29f48e83\"), MIME type application/vnd.pluto.tree+object)), (:queued, (\"false\", MIME type text/plain)), (:running, (\"false\", MIME type text/plain)), (:published_objects, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"b0700df3fb2262f\"), MIME type application/vnd.pluto.tree+object)), (:logs, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"ac95c65402d43f3a\"), MIME type application/vnd.pluto.tree+object)), (:errored, (\"false\", MIME type text/plain)), (:runtime, (\"0x000000000024e294\", MIME type text/plain)), (:cell_dependencies, (Dict{Symbol, Any}(:prefix => \"CellDependencies{Cell}\", :elements => Any[(:downstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"62f74f23e1844f97\"), MIME type application/vnd.pluto.tree+object)), (:upstream_cells_map, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Vector{Pluto.Cell}}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"6d013e3375982cae\"), MIME type application/vnd.pluto.tree+object)), (:precedence_heuristic, (\"9\", MIME type text/plain))], :type => :struct, :prefix_short => \"CellDependencies\", :objectid => \"6f58f7ab998c6a64\"), MIME type application/vnd.pluto.tree+object)), (:running_disabled, (\"false\", MIME type text/plain)), (:depends_on_disabled_cells, (\"false\", MIME type text/plain))], :type => :struct, :prefix_short => \"Cell\", :objectid => \"529e169f2a1fa0b1\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"\", :objectid => \"9a6d710554df01e9\"), MIME type application/vnd.pluto.tree+object)), (:errable, (Dict{Symbol, Any}(:prefix => \"Dict{Pluto.Cell, Pluto.ReactivityError}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4c1a028ab081c411\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"TopologicalOrder\", :objectid => \"677bbbb10df72cdd\"), MIME type application/vnd.pluto.tree+object)), (:pendingupdates, (\"Channel{Any}(1024) (empty)\", MIME type text/plain)), (:executetoken, (Dict{Symbol, Any}(:prefix => \"Pluto.Token\", :elements => Any[(:c, (\"Channel{Nothing}(1) (1 item available)\", MIME type text/plain))], :type => :struct, :prefix_short => \"Token\", :objectid => \"41067d16312467c7\"), MIME type application/vnd.pluto.tree+object)), (:compiler_options, (\"nothing\", MIME type text/plain)), (:nbpkg_ctx, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Context\", :elements => Any[(:env, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.EnvCache\", :elements => Any[(:env, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml\\\"\", MIME type text/plain)), (:project_file, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml\\\"\", MIME type text/plain)), (:manifest_file, (\"\\\"C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Manifest.toml\\\"\", MIME type text/plain)), (:pkg, (\"nothing\", MIME type text/plain)), (:project, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Project\", :elements => Any[(:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"279b16067305cc21\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"nothing\", MIME type text/plain)), (:uuid, (\"nothing\", MIME type text/plain)), (:version, (\"nothing\", MIME type text/plain)), (:manifest, (\"nothing\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"f623c6ab10170933\"), MIME type application/vnd.pluto.tree+object)), (:extras, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"fcd8de839d813600\"), MIME type application/vnd.pluto.tree+object)), (:targets, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"57afb931532ef5ae\"), MIME type application/vnd.pluto.tree+object)), (:compat, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"c685634bca01f12\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Project\", :objectid => \"3e2a98761e0af5fc\"), MIME type application/vnd.pluto.tree+object)), (:manifest, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Manifest\", :elements => Any[(:julia_version, (\"nothing\", MIME type text/plain)), (:manifest_format, (\"v\\\"1.0.0\\\"\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pkg.Types.PackageEntry}\", :elements => Any[\"more\"], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"7467fc2feb04933a\"), MIME type application/vnd.pluto.tree+object)), (:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"46e92d3f31a1904e\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Manifest\", :objectid => \"d9f893335184ff08\"), MIME type application/vnd.pluto.tree+object)), (:original_project, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Project\", :elements => Any[(:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"320a49cc0054c524\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"nothing\", MIME type text/plain)), (:uuid, (\"nothing\", MIME type text/plain)), (:version, (\"nothing\", MIME type text/plain)), (:manifest, (\"nothing\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"1aaacc335195cc4f\"), MIME type application/vnd.pluto.tree+object)), (:extras, (Dict{Symbol, Any}(:prefix => \"Dict{String, Base.UUID}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"3d254e97968ad22b\"), MIME type application/vnd.pluto.tree+object)), (:targets, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"afa35941fb86ed46\"), MIME type application/vnd.pluto.tree+object)), (:compat, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"650f362be65ea827\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Project\", :objectid => \"6f35723d543b7205\"), MIME type application/vnd.pluto.tree+object)), (:original_manifest, (Dict{Symbol, Any}(:prefix => \"Pkg.Types.Manifest\", :elements => Any[(:julia_version, (\"nothing\", MIME type text/plain)), (:manifest_format, (\"v\\\"1.0.0\\\"\", MIME type text/plain)), (:deps, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Pkg.Types.PackageEntry}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4cf5722fb62b228f\"), MIME type application/vnd.pluto.tree+object)), (:other, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5eddd42d59fe097e\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Manifest\", :objectid => \"9f2c84ec3e5a86c2\"), MIME type application/vnd.pluto.tree+object)), (:uuids, (Dict{Symbol, Any}(:prefix => \"Dict{String, Vector{Base.UUID}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"5d07caa8dddc0fd1\"), MIME type application/vnd.pluto.tree+object)), (:paths, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"58dd82f255877e94\"), MIME type application/vnd.pluto.tree+object)), (:names, (Dict{Symbol, Any}(:prefix => \"Dict{Base.UUID, Vector{String}}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"e7a16043f30f3791\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"EnvCache\", :objectid => \"7818092211dc80ff\"), MIME type application/vnd.pluto.tree+object)), (:io, (\"IOContext(Base.PipeEndpoint(Base.Libc.WindowsRawSocket(0xffffffffffffffff) closed, 0 bytes waiting))\", MIME type text/plain)), (:use_libgit2_for_all_downloads, (\"false\", MIME type text/plain)), (:use_only_tarballs_for_downloads, (\"false\", MIME type text/plain)), (:num_concurrent_downloads, (\"8\", MIME type text/plain)), (:graph_verbose, (\"false\", MIME type text/plain)), (:julia_version, (\"v\\\"1.6.3\\\"\", MIME type text/plain)), (:status_io, (\"nothing\", MIME type text/plain)), (:parser, (Dict{Symbol, Any}(:prefix => \"Base.TOML.Parser\", :elements => Any[(:str, (\"\\\"\\\"\", MIME type text/plain)), (:current_char, (\"'\\\\xff\\\\xff\\\\xff\\\\xff': Malformed UTF-8 (category Ma: Malformed, bad data)\", MIME type text/plain)), (:pos, (\"1\", MIME type text/plain)), (:prevpos, (\"1\", MIME type text/plain)), (:column, (\"1\", MIME type text/plain)), (:line, (\"1\", MIME type text/plain)), (:marker, (\"0\", MIME type text/plain)), (:active_table, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4ab1bbcd392fc7ea\"), MIME type application/vnd.pluto.tree+object)), (:dotted_keys, (Dict{Symbol, Any}(:prefix => \"String\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"51e25f21c7910ca7\"), MIME type application/vnd.pluto.tree+object)), (:chunks, (Dict{Symbol, Any}(:prefix => \"UnitRange{Int64}\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"836015a52a8c76cd\"), MIME type application/vnd.pluto.tree+object)), (:inline_tables, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Dict{String, Any}}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"ffcd9a2828c4ef35\"), MIME type application/vnd.pluto.tree+object)), (:static_arrays, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Any}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"c12d1b7cab83f183\"), MIME type application/vnd.pluto.tree+object)), (:defined_tables, (Dict{Symbol, Any}(:prefix => \"Base.IdSet{Dict{String, Any}}\", :elements => Any[], :type => :Set, :prefix_short => \"IdSet\", :objectid => \"3219feeb8d5db6bb\"), MIME type application/vnd.pluto.tree+object)), (:root, (Dict{Symbol, Any}(:prefix => \"Dict{String, Any}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4ab1bbcd392fc7ea\"), MIME type application/vnd.pluto.tree+object)), (:filepath, (\"nothing\", MIME type text/plain)), (:Dates, (\"Dates\", MIME type text/plain))], :type => :struct, :prefix_short => \"Parser\", :objectid => \"8a38ed5cbc6f4f0c\"), MIME type application/vnd.pluto.tree+object))], :type => :struct, :prefix_short => \"Context\", :objectid => \"6307c75b69dbd8a6\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_ctx_instantiated, (\"true\", MIME type text/plain)), (:nbpkg_restart_recommended_msg, (\"nothing\", MIME type text/plain)), (:nbpkg_restart_required_msg, (\"nothing\", MIME type text/plain)), (:nbpkg_terminal_outputs, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[((\"\\\"Distributed\\\"\", MIME type text/plain), (\"\\\"\\\\e[32m\\\\e[1m No Changes\\\\e[22m\\\\e[39m to `C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Project.toml`\\\\n\\\\e[32m\\\\e[1m No Changes\\\\e[22m\\\\e[39m to `C:\\\\\\\\Users\\\\\\\\family\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\jl_FADDmD\\\\\\\\Manifest.toml`\\\\n\\\\e[32m\\\\e[1mLoading\\\\e[22m\\\\e[39m packages...\\\\n\\\"\", MIME type text/plain))], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4b6025649c4557a0\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_busy_packages, (Dict{Symbol, Any}(:prefix => \"String\", :elements => Tuple{Int64, Any}[], :type => :Array, :prefix_short => \"\", :objectid => \"c965e775902cd86c\"), MIME type application/vnd.pluto.tree+object)), (:nbpkg_installed_versions_cache, (Dict{Symbol, Any}(:prefix => \"Dict{String, String}\", :elements => Any[((\"\\\"Distributed\\\"\", MIME type text/plain), (\"\\\"stdlib\\\"\", MIME type text/plain))], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"55b68b00817d514\"), MIME type application/vnd.pluto.tree+object)), (:process_status, (\"\\\"ready\\\"\", MIME type text/plain)), (:wants_to_interrupt, (\"false\", MIME type text/plain)), (:last_save_time, (\"1.658989566938e9\", MIME type text/plain)), (:last_hot_reload_time, (\"0.0\", MIME type text/plain)), (:bonds, (Dict{Symbol, Any}(:prefix => \"Dict{Symbol, Pluto.BondValue}\", :elements => Any[], :type => :Dict, :prefix_short => \"Dict\", :objectid => \"4c345fae9c8ecfd8\"), MIME type application/vnd.pluto.tree+object))], :struct, \"Notebook\", \"53b544a4c2915b19\"] #noop @test nb.cells[4].output.body == \"5\" ------ Output ------ executecode(nb::Notebook)\u2013> This function does the following Take a notebook. Create a fake server, fake client etc. Run the notebook cell by cell and update the notebook with the output. source","title":"executecode"},{"location":"common/","text":"Common getsettings getsettings(f:: AbstractString, keys:: AbstractString) \u2013> get the items related to the keys from the Project.toml file source #noop begin f = joinpath(\"..\", \"Project.toml\") path = \"https://github.com/sapal6/Nbdev.jl\" res = Dict(\"github_url\" => \"https://github.com/sapal6/Nbdev.jl\") end ------ Output ------ #noop @test getsetting(f, \"settings\") == res ------ Output ------ #noop @test getsettings(f, [\"settings\", \"github_url\"]) == res[\"github_url\"] ------ Output ------","title":"Common"},{"location":"common/#getsettings","text":"getsettings(f:: AbstractString, keys:: AbstractString) \u2013> get the items related to the keys from the Project.toml file source #noop begin f = joinpath(\"..\", \"Project.toml\") path = \"https://github.com/sapal6/Nbdev.jl\" res = Dict(\"github_url\" => \"https://github.com/sapal6/Nbdev.jl\") end ------ Output ------ #noop @test getsetting(f, \"settings\") == res ------ Output ------ #noop @test getsettings(f, [\"settings\", \"github_url\"]) == res[\"github_url\"] ------ Output ------","title":"getsettings"},{"location":"developerguide/","text":"Developerguide First of all, thank you for having a look into Nbdev. If you are reading this then it's safe to say that you have taken Nbdev for a spin and you want to contribute to the project. May be you found somethign that can add value to Nbdev or may be something is missing which you want ot add. Whatever the reason maybe, here are some of the ways in which you can contribute \ud83d\udc47 You can write a tutorial. You can contribute to documentations. You can provide feedback. You can contribute code. Before moving into the details about how you can do the above mentioned contributions, let's see how to setup Nbdev for the first time. Setting things up Working on Nbdev or any other open source project starts with a \"fork\". If you are new to open source or this is your first time contribution to an open source project then read the following tutorial to get a quick understanding of what a \"fork\" is and how you can get started with forking a project. After you fork the project, clone the repo somewhere in your local machine. Nbdev is built on itself i.e. the starting point of all the code and documentation in Nbdev is a Pluto notebook. To get started, create a project directory and move into the directory. Here, you need to start a new environment like this \ud83d\udc47 mkdir ~/nbdev_dev cd ~/nbdev_dev julia This would create a directory namedb \"nbdev_dev\" and take you inside that directory. After which the Julia terminal would fire up. Once inside Julia terminal type ] to enter the package manager then type the following \ud83d\udc47 (v1.0) pkg> activate . (nbdev_dev) pkg> dev <path/to/cloned/repo After this move back to the Julia terminal and type \ud83d\udc47 julia> import Pluto julia> Pluto.run() This gives you a fresh Pluto environment to work in. From this point onwards, you can either start a new notebook or work on an existing notebook if it's a bug fix or documentation change. How to get started \ud83c\udfc3\u200d\u2640\ufe0f Here are some of the way to get started with contributing \ud83d\udc47 Pick a piece of code in nbdev and checkout the test for it. If there is a missing test then add it. If an existing test doesn't provide sufficient coverage then add it. You noticed somethign missing in the documentation? go ahead and add it. Feel like the tutorial needs imrpovement or a few more tutorials could be useful? go ahead and write a tutorial. Oh! you found a bug \ud83d\udd8a\ud83d\udc1b First ensure that such bug was not reported earlier in issues If you're unable to find an open issue addressing the problem, open a new one . Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring. Be sure to add the complete error messages. Intending to add a new feature or enhancing an old one? \ud83d\udc69\u200d\ud83d\udd27 You can start a discussion on the discussion tab . this will help you to find if others are instrested in same thing as you and maybe you can find collaborators. While working on a new feature first create a detailed notebook about the feature that you would like to add. The notebook should contain a detailed description about the feature, why you think this feature is needed and a step-by-step description about what your code is doing. Once you think that you are ready with your example notebook, post a gist in the discussion forum. Once your feature request is dicussed and finalized then you can open a PR. Make sure to include a complete description of the feature and an example of it's usage. Make sure that your code has a good documentation and follows the style guide. Ensure that your PR includes tests that exercise not only your feature, but also any other code that might be impacted. Submitting a PR \ud83c\udf88 All Nbdev code starts with a Pluto notebook. The exported code from the notebook then appears as the final code under the src directory and the related documentation under the docs directory. If you are submitting your PR \u2013> Always start your developement with a Pluto notebook because if you modify code, add code or create a new code file under the src directory directly then the source notebooks won't have your modifications. Once you add a new code in an existing notebook, update an existing code in a cell that is supposed to be exported or added a new code in a new notebook with cells marked with #export then make sure to run notebook2script in the same notebook so as to export the code to the respective files under the src directory. After everything is finalized, make sure to run make.jl docs at the terminal in order to export the documentation. Make sure that your PR is accompanied by sufficient test coverage. Either in the notebook itself or under the test dicrectory. Currently Nbdev has poor test coverage so you may need to include test for the impacted code as well. Do not combine several unrelated fixes together. Create separate branches for separate fixes, separate features etc. Preserve the original code styling of an existing file. Want to contribute to the docs? \ud83d\udcd3 The docs are generated from the notebooks in the nbs directory. If you are planning to edit an already existing notebook then make sure not to add the #export flag to the existing documentation cells or any new documentation cell that you might add. If you are planning to add a new notebook for documentation then make sure not to add #export to any of the cell in this new notebook.","title":"Developer's guide"},{"location":"developerguide/#setting-things-up","text":"Working on Nbdev or any other open source project starts with a \"fork\". If you are new to open source or this is your first time contribution to an open source project then read the following tutorial to get a quick understanding of what a \"fork\" is and how you can get started with forking a project. After you fork the project, clone the repo somewhere in your local machine. Nbdev is built on itself i.e. the starting point of all the code and documentation in Nbdev is a Pluto notebook. To get started, create a project directory and move into the directory. Here, you need to start a new environment like this \ud83d\udc47 mkdir ~/nbdev_dev cd ~/nbdev_dev julia This would create a directory namedb \"nbdev_dev\" and take you inside that directory. After which the Julia terminal would fire up. Once inside Julia terminal type ] to enter the package manager then type the following \ud83d\udc47 (v1.0) pkg> activate . (nbdev_dev) pkg> dev <path/to/cloned/repo After this move back to the Julia terminal and type \ud83d\udc47 julia> import Pluto julia> Pluto.run() This gives you a fresh Pluto environment to work in. From this point onwards, you can either start a new notebook or work on an existing notebook if it's a bug fix or documentation change.","title":"Setting things up"},{"location":"developerguide/#how-to-get-started","text":"Here are some of the way to get started with contributing \ud83d\udc47 Pick a piece of code in nbdev and checkout the test for it. If there is a missing test then add it. If an existing test doesn't provide sufficient coverage then add it. You noticed somethign missing in the documentation? go ahead and add it. Feel like the tutorial needs imrpovement or a few more tutorials could be useful? go ahead and write a tutorial.","title":"How to get started \ud83c\udfc3\u200d\u2640\ufe0f"},{"location":"developerguide/#oh-you-found-a-bug","text":"First ensure that such bug was not reported earlier in issues If you're unable to find an open issue addressing the problem, open a new one . Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring. Be sure to add the complete error messages.","title":"Oh&#33; you found a bug \ud83d\udd8a\ud83d\udc1b"},{"location":"developerguide/#intending-to-add-a-new-feature-or-enhancing-an-old-one","text":"You can start a discussion on the discussion tab . this will help you to find if others are instrested in same thing as you and maybe you can find collaborators. While working on a new feature first create a detailed notebook about the feature that you would like to add. The notebook should contain a detailed description about the feature, why you think this feature is needed and a step-by-step description about what your code is doing. Once you think that you are ready with your example notebook, post a gist in the discussion forum. Once your feature request is dicussed and finalized then you can open a PR. Make sure to include a complete description of the feature and an example of it's usage. Make sure that your code has a good documentation and follows the style guide. Ensure that your PR includes tests that exercise not only your feature, but also any other code that might be impacted. Submitting a PR \ud83c\udf88 All Nbdev code starts with a Pluto notebook. The exported code from the notebook then appears as the final code under the src directory and the related documentation under the docs directory. If you are submitting your PR \u2013> Always start your developement with a Pluto notebook because if you modify code, add code or create a new code file under the src directory directly then the source notebooks won't have your modifications. Once you add a new code in an existing notebook, update an existing code in a cell that is supposed to be exported or added a new code in a new notebook with cells marked with #export then make sure to run notebook2script in the same notebook so as to export the code to the respective files under the src directory. After everything is finalized, make sure to run make.jl docs at the terminal in order to export the documentation. Make sure that your PR is accompanied by sufficient test coverage. Either in the notebook itself or under the test dicrectory. Currently Nbdev has poor test coverage so you may need to include test for the impacted code as well. Do not combine several unrelated fixes together. Create separate branches for separate fixes, separate features etc. Preserve the original code styling of an existing file.","title":"Intending to add a new feature or enhancing an old one? \ud83d\udc69\u200d\ud83d\udd27"},{"location":"developerguide/#want-to-contribute-to-the-docs","text":"The docs are generated from the notebooks in the nbs directory. If you are planning to edit an already existing notebook then make sure not to add the #export flag to the existing documentation cells or any new documentation cell that you might add. If you are planning to add a new notebook for documentation then make sure not to add #export to any of the cell in this new notebook.","title":"Want to contribute to the docs? \ud83d\udcd3"},{"location":"documenter/","text":"Documenter Lower Level Entities(Structs, methods etc.) These are the objects on which nbdev's Documenter module was built. You can use it to extend nbdev but these are automtically used by Nbdev's internal engine to generate code files for you. #noop begin f = joinpath(\"..\", \"Project.toml\") path = \"https://github.com/sapal6/Nbdev.jl\" res = Dict(\"github_url\" => \"https://github.com/sapal6/Nbdev.jl\") end ------ Output ------ #noop @test Common.getsetting(f, \"settings\") == res ------ Output ------ #noop @test Common.getsettings(f, [\"settings\", \"github_url\"]) == res[\"github_url\"] ------ Output ------ Section type line(section::Section)\u2013> Getter for accessing the underlying field line. source Example section=Section(\"This is a test line\") ------ Output ------ Any[\"Section\", Any[(:line, (\"\\\"This is a test line\\\"\", MIME type text/plain))], :struct, \"Section\", \"e05e54076988abf4\"] #noop @test line(section) == \"This is a test line\" ------ Output ------ Page Type Page\u2013> The type that represents a page in a document. Fields: sections\u2013> Array of Section type. name\u2013> Name of the module being documented. source Page\u2013> Helper function to create constructer for Page type. source sections\u2013> Getter for accessing the underlying field sections of Page. source name\u2013> Getter for accessing the underlying field name of Page. source A \ud83d\udcc3 is made up of several sections. These sections can be example codes, text ,graphs(to be implemented) and function documentation and several pages. The Page type helps in implementing this concept into code. Example begin page=Page([Section(\"iny, meeny, miny mo\"), Section(\"\ud83d\ude48 \ud83d\ude4a \ud83d\ude49\")], \"Monkey module\") sections(page) end ------ Output ------ Any[\"Main.workspace#9.Section\", Tuple{Int64, Any}[(1, (Dict{Symbol, Any}(:prefix => \"Section\", :elements => Any[(:line, (\"\\\"iny, meeny, miny mo\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Section\", :objectid => \"c89c9716340cc7ce\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Section\", :elements => Any[(:line, (\"\\\"\ud83d\ude48 \ud83d\ude4a \ud83d\ude49\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Section\", :objectid => \"d497a952cc02ed67\"), MIME type application/vnd.pluto.tree+object))], :Array, \"\", \"79a209370de06e21\"] page ------ Output ------ Any[\"Page\", Any[(:sections, (Dict{Symbol, Any}(:prefix => \"Main.workspace#9.Section\", :elements => Tuple{Int64, Any}[(1, (Dict{Symbol, Any}(:prefix => \"Section\", :elements => Any[(:line, (\"\\\"iny, meeny, miny mo\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Section\", :objectid => \"c89c9716340cc7ce\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Section\", :elements => Any[(:line, (\"\\\"\ud83d\ude48 \ud83d\ude4a \ud83d\ude49\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Section\", :objectid => \"d497a952cc02ed67\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"\", :objectid => \"79a209370de06e21\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"\\\"Monkey module\\\"\", MIME type text/plain))], :struct, \"Page\", \"a51ab6df27f0b54e\"] typeof(page) ------ Output ------ Page run and update runandupdatenb uses the load_notebook_nobackup function in Pluto.jl. There are multiple ways to achieve what this function achieves without depending on Pluto internals but for now this was the quickiest way to achieve this. Note- Depending on Pluto internal to run and update a notebook makes it difficult to run unit test for this function from within pluto itself because a Pluto cell is treated as worker 2, 3 and so on but when you do load_notebook() then it spins up another worker. Only worker 1 can spwan further processes and not a notebook cell. runandupdatenb(fn::AbstractString)\u2013> Run the notebook in the supplied path and update the notebook with the output of each cell. source stitchcode stitchcode(cell::Cell)\u2013> Stitches the code in a Pluto notebook cell with the output of that code. The output is a code block. source stitchcode(cellop::AbstractString)\u2013> Removes the quotes from a string and creates a code block with that string inside the newely formed code block source stitchcode(fdocs::Functiondocs)\u2013> When supplied with a FunctionDocs type, stitchCode appends together the object docstrings and generates documentation for that particular object source Functiondocs struct Functiondocs\u2013> Stores the document of different objects. funcdocs\u2013> Array of strings. source Functiondocs(funcdocs)\u2013> Helper for accessing the FunctionDocs constructer. source Example begin funcdocs=Functiondocs([\"i\", \"j\"]) funcdocs.funcdocs end ------ Output ------ Any[\"String\", Tuple{Int64, Any}[(1, (\"\\\"i\\\"\", MIME type text/plain)), (2, (\"\\\"j\\\"\", MIME type text/plain))], :Array, \"\", \"c8e03403b6fd65b5\"] collectfuncdocs collectfuncdocs(obj)\u2013> Collects objects (functions, methods, macro structs etc.) and creates an array of documents (generated from the docstrings). Creates aFunctionDocs type from these documents. source Example collectfuncdocs(stitchcode).funcdocs ------ Output ------ Any[\"String\", Tuple{Int64, Any}[(1, (\"\\\"> stitchcode(cell::Cell)\u2013> Stitches the code in a Pluto notebook cell with the output of that code. The output is a code block.\\\\n\\\\n [source](https://github-link.vercel.app/api?ghUrl=https://github.com/sapal6/Nbdev.jl/blob/master/src/Documenter.jl&q=stitchcode)\\\"\", MIME type text/plain)), (2, (\"\\\"> stitchcode(cellop::AbstractString)\u2013> Removes the quotes from a string and creates a code block with that string inside the newely formed code block\\\\n\\\\n [source](https://github-link.vercel.app/api?ghUrl=https://github.com/sapal6/Nbdev.jl/blob/master/src/Documenter.jl&q=stitchcode)\\\"\", MIME type text/plain)), (3, (\"\\\"> stitchcode(fdocs::Functiondocs)\u2013> When supplied with a FunctionDocs type, stitchCode appends together the object docstrings and generates documentation for that particular object\\\\n\\\\n [source](https://github-link.vercel.app/api?ghUrl=https://github.com/sapal6/Nbdev.jl/blob/master/src/Documenter.jl&q=stitchcode)\\\"\", MIME type text/plain))], :Array, \"\", \"a839de267daaaf97\"] Higher Level API These higher level APIs can either be used directly or are already used internally by nbdev. One such functions which can be used directly is... showdoc showdoc(o)\u2013> Takes an object and builds markdown documentation. source #noop begin \"\"\" > An example of a struct \"\"\" struct Mystruct name end end ------ Output ------ mystruct=Mystruct(\"test\") ------ Output ------ Any[\"Mystruct\", Any[(:name, (\"\\\"test\\\"\", MIME type text/plain))], :struct, \"Mystruct\", \"51ee7213ed45799a\"] typeof(mystruct) ------ Output ------ Mystruct showdoc(Mystruct) An example of a struct source Currently nbdev is unable to recognize the docstrings of inline expressions.\ud83d\udc47 #noop \"> inlinetest--> This is a inline test expression\" inlinetest=str->replace(str, \"1\"=> \"one\") ------ Output ------ createpage CreatePage\u2013> Creates the Page type from the markdown and example code cells of the supplied notebook. The filename is the name of the notebook which is parsed. source While generating document you don't need to call this function. This is done automatically\ud83d\ude03 for you when nbdev generates documents. savepage savepage(io, page::Page)\u2013> Take the contents from a Page type and write to the io source savepage(page::Page, path::String)\u2013> Given a Page type and the required path, creates the related markdwon file in the specified path. The name of the resulting markdown file is same as the nameof the notebook for which the document is generated source Nbdev calls the required method of save_page automatically during document generation. export2md export2md(fn::String, path::String)\u2013> Generate document for a file in the given path source export2md(fns::AbstractVector, path::String)\u2013> Map the export2md(file, path) to a given vector of file. source export2md()\u2013> Higher level API to generate documents for all the valid notebooks source Export.readfilenames(joinpath(pwd())) ------ Output ------ Any[\"Any\", Tuple{Int64, Any}[(1, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\00_nbdev.jl\\\"\", MIME type text/plain)), (2, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\01_export.jl\\\"\", MIME type text/plain)), (3, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\02_documenter.jl\\\"\", MIME type text/plain)), (4, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\03_codeRunner.jl\\\"\", MIME type text/plain)), (5, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\04_make.jl\\\"\", MIME type text/plain)), (6, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\05_common.jl\\\"\", MIME type text/plain)), (7, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\developerguide.jl\\\"\", MIME type text/plain)), (8, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\index.jl\\\"\", MIME type text/plain)), (9, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\styleguide.jl\\\"\", MIME type text/plain)), (10, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\tutorial.jl\\\"\", MIME type text/plain))], :Array, \"\", \"cd03d9b6421d53ba\"] The export2md() is what gets summoned when document generation is invoked. Like most things in nbdev (and unlike most things in life) this too gets invoked automatically. \ud83e\udd73 #### export2readme ------ Output ------ export2readme()\u2013> create readme from the contents of Index notebook source","title":"Documenter"},{"location":"documenter/#lower-level-entitiesstructs-methods-etc","text":"These are the objects on which nbdev's Documenter module was built. You can use it to extend nbdev but these are automtically used by Nbdev's internal engine to generate code files for you. #noop begin f = joinpath(\"..\", \"Project.toml\") path = \"https://github.com/sapal6/Nbdev.jl\" res = Dict(\"github_url\" => \"https://github.com/sapal6/Nbdev.jl\") end ------ Output ------ #noop @test Common.getsetting(f, \"settings\") == res ------ Output ------ #noop @test Common.getsettings(f, [\"settings\", \"github_url\"]) == res[\"github_url\"] ------ Output ------","title":"Lower Level Entities&#40;Structs, methods etc.&#41;"},{"location":"documenter/#section-type","text":"line(section::Section)\u2013> Getter for accessing the underlying field line. source","title":"Section type"},{"location":"documenter/#example","text":"section=Section(\"This is a test line\") ------ Output ------ Any[\"Section\", Any[(:line, (\"\\\"This is a test line\\\"\", MIME type text/plain))], :struct, \"Section\", \"e05e54076988abf4\"] #noop @test line(section) == \"This is a test line\" ------ Output ------","title":"Example"},{"location":"documenter/#page-type","text":"Page\u2013> The type that represents a page in a document. Fields: sections\u2013> Array of Section type. name\u2013> Name of the module being documented. source Page\u2013> Helper function to create constructer for Page type. source sections\u2013> Getter for accessing the underlying field sections of Page. source name\u2013> Getter for accessing the underlying field name of Page. source A \ud83d\udcc3 is made up of several sections. These sections can be example codes, text ,graphs(to be implemented) and function documentation and several pages. The Page type helps in implementing this concept into code.","title":"Page Type"},{"location":"documenter/#runandupdate","text":"runandupdatenb uses the load_notebook_nobackup function in Pluto.jl. There are multiple ways to achieve what this function achieves without depending on Pluto internals but for now this was the quickiest way to achieve this. Note- Depending on Pluto internal to run and update a notebook makes it difficult to run unit test for this function from within pluto itself because a Pluto cell is treated as worker 2, 3 and so on but when you do load_notebook() then it spins up another worker. Only worker 1 can spwan further processes and not a notebook cell. runandupdatenb(fn::AbstractString)\u2013> Run the notebook in the supplied path and update the notebook with the output of each cell. source","title":"runandupdate"},{"location":"documenter/#stitchcode","text":"stitchcode(cell::Cell)\u2013> Stitches the code in a Pluto notebook cell with the output of that code. The output is a code block. source stitchcode(cellop::AbstractString)\u2013> Removes the quotes from a string and creates a code block with that string inside the newely formed code block source stitchcode(fdocs::Functiondocs)\u2013> When supplied with a FunctionDocs type, stitchCode appends together the object docstrings and generates documentation for that particular object source","title":"stitchcode"},{"location":"documenter/#functiondocs","text":"struct Functiondocs\u2013> Stores the document of different objects. funcdocs\u2013> Array of strings. source Functiondocs(funcdocs)\u2013> Helper for accessing the FunctionDocs constructer. source","title":"Functiondocs"},{"location":"documenter/#collectfuncdocs","text":"collectfuncdocs(obj)\u2013> Collects objects (functions, methods, macro structs etc.) and creates an array of documents (generated from the docstrings). Creates aFunctionDocs type from these documents. source","title":"collectfuncdocs"},{"location":"documenter/#higher-level-api","text":"These higher level APIs can either be used directly or are already used internally by nbdev. One such functions which can be used directly is...","title":"Higher Level API"},{"location":"documenter/#showdoc","text":"showdoc(o)\u2013> Takes an object and builds markdown documentation. source #noop begin \"\"\" > An example of a struct \"\"\" struct Mystruct name end end ------ Output ------ mystruct=Mystruct(\"test\") ------ Output ------ Any[\"Mystruct\", Any[(:name, (\"\\\"test\\\"\", MIME type text/plain))], :struct, \"Mystruct\", \"51ee7213ed45799a\"] typeof(mystruct) ------ Output ------ Mystruct showdoc(Mystruct) An example of a struct source Currently nbdev is unable to recognize the docstrings of inline expressions.\ud83d\udc47 #noop \"> inlinetest--> This is a inline test expression\" inlinetest=str->replace(str, \"1\"=> \"one\") ------ Output ------","title":"showdoc"},{"location":"documenter/#createpage","text":"CreatePage\u2013> Creates the Page type from the markdown and example code cells of the supplied notebook. The filename is the name of the notebook which is parsed. source While generating document you don't need to call this function. This is done automatically\ud83d\ude03 for you when nbdev generates documents.","title":"createpage"},{"location":"documenter/#savepage","text":"savepage(io, page::Page)\u2013> Take the contents from a Page type and write to the io source savepage(page::Page, path::String)\u2013> Given a Page type and the required path, creates the related markdwon file in the specified path. The name of the resulting markdown file is same as the nameof the notebook for which the document is generated source Nbdev calls the required method of save_page automatically during document generation.","title":"savepage"},{"location":"documenter/#export2md","text":"export2md(fn::String, path::String)\u2013> Generate document for a file in the given path source export2md(fns::AbstractVector, path::String)\u2013> Map the export2md(file, path) to a given vector of file. source export2md()\u2013> Higher level API to generate documents for all the valid notebooks source Export.readfilenames(joinpath(pwd())) ------ Output ------ Any[\"Any\", Tuple{Int64, Any}[(1, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\00_nbdev.jl\\\"\", MIME type text/plain)), (2, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\01_export.jl\\\"\", MIME type text/plain)), (3, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\02_documenter.jl\\\"\", MIME type text/plain)), (4, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\03_codeRunner.jl\\\"\", MIME type text/plain)), (5, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\04_make.jl\\\"\", MIME type text/plain)), (6, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\05_common.jl\\\"\", MIME type text/plain)), (7, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\developerguide.jl\\\"\", MIME type text/plain)), (8, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\index.jl\\\"\", MIME type text/plain)), (9, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\styleguide.jl\\\"\", MIME type text/plain)), (10, (\"\\\"C:\\\\\\\\satya\\\\\\\\julia\\\\\\\\nbdev.jl-changes\\\\\\\\nbdev-backlinks\\\\\\\\nbs\\\\\\\\tutorial.jl\\\"\", MIME type text/plain))], :Array, \"\", \"cd03d9b6421d53ba\"] The export2md() is what gets summoned when document generation is invoked. Like most things in nbdev (and unlike most things in life) this too gets invoked automatically. \ud83e\udd73 #### export2readme ------ Output ------ export2readme()\u2013> create readme from the contents of Index notebook source","title":"export2md"},{"location":"export/","text":"Export The Export module helps in exporting the code to script files. using PlutoTest ------ Output ------ Lower Level Entities(Structs, methods etc.) These are the objects on which nbdev's Export module was built. You can use it to extend nbdev but these are automtically used by Nbdev's internal engine to generate code files for you. Nucleus type Nucleus(code)\u2013>Getter for accessing the constructer of the Nucleus type source Every time a code cell is parsed, it gets stored as a Nucleus type. The stored code can then be accessed using the code field in the Nucleus type. Example sample_code=\"a=1+1\" ------ Output ------ \"a=1+1\" n=nucleus(sample_code) ------ Output ------ Any[\"Nucleus\", Any[(:code, (\"\\\"a=1+1\\\"\", MIME type text/plain))], :struct, \"Nucleus\", \"9c5b9f1cb48d342b\"] #noop @test n.code == \"a=1+1\" ------ Output ------ Nb type struct Nb\u2013> a notebook having nuclei made up of code cells only. Fields: nuclei\u2013> Array of Nucleus type name\u2013> name of notebook source nuclei(nuclei::Array)\u2013> Helper to collect an array of Nucleus. source nuclei(nuclei::Array)\u2013> Helper to collect an name of a notebook. source A Nb type is used to collect all code cells(which are contained in the Nucleus type. These code cells are actual code represented as string. Example samplecodes=[Nucleus(\"a=1+1\"), Nucleus(\"function test(x) x+1 end\"), Nucleus(\"test(2)\")] ------ Output ------ Any[\"Main.workspace#4.Nucleus\", Tuple{Int64, Any}[(1, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"a=1+1\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"d158a468cc7dd7e7\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"function test(x) x+1 end\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"e82ab27c6d1e65c\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"test(2)\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"4bb821bb413cd32e\"), MIME type application/vnd.pluto.tree+object))], :Array, \"\", \"7c720a4f9e78775a\"] nb=Nb(samplecodes, \"testnb.jl\") ------ Output ------ Any[\"Nb\", Any[(:nuclei, (Dict{Symbol, Any}(:prefix => \"Main.workspace#4.Nucleus\", :elements => Tuple{Int64, Any}[(1, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"a=1+1\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"d158a468cc7dd7e7\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"function test(x) x+1 end\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"e82ab27c6d1e65c\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"test(2)\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"4bb821bb413cd32e\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"\", :objectid => \"7c720a4f9e78775a\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"\\\"testnb.jl\\\"\", MIME type text/plain))], :struct, \"Nb\", \"ceed878b4211d5c8\"] #noop @test nb.nuclei == samplecodes ------ Output ------ #noop @test nb.name == \"testnb.jl\" ------ Output ------ collectnuclei(notebook::Scrubbednb, marker)\u2013> Reads a notebook, collects code from code cells and returns an array of Nucelus. source collect_nuclei(notebook::ScrubbedNotebook, marker) reads the entire notebook cell by cell and then checks if the content of that cell starts with a marker, only then it builds an array of the Nucleus type. loadscrubbednb loadscrubbednb(io, path)::Scrubbednb\u2013> These are modification of the Pluto.load_notebook methods. Scrubs the notebook of all stuff but the code to be exported. source loadscrubbednb reads the notebook in the given path cell by cell, while ignoring the stuffs in the notebook like the cell order delimeters and the cell start delimeter. The result is a ScrubbedNotebook type which contains only the code which you intend to export. High Level APIs This too are called automatically by Nbdev. loadnb loadnb(filename::String, marker::String)\u2013> High level function which calls load nb source load nb(filename::String, marker::String)\u2013> creates a scrubbed notebook and returns a curated Nb type having code to be exported. source Scrubbednb testnb= loadnb(\"01_export.jl\", \"#export\") ------ Output ------ Any[\"Nb\", Any[(:nuclei, (Dict{Symbol, Any}(:prefix => \"Main.workspace#4.Nucleus\", :elements => Any[(1, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nimport Pluto: Notebook, Cell, load_notebook_nobackup\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"5342514a49d27ca0\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nbegin\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> struct Nucleus--> This is the lowest entity of a code notebook. This type represents the code cell in a Pluto notebook.\\\\n> * Fields:\\\\n> * code--> String which makes up a code cell\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nBase.@kwdef mutable struct Nucleus\\\\n\\\\tcode::String=\\\\\\\"\\\\\\\"\\\\n\\\\tend\\\\n\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> Nucleus(code)-->Getter for accessing the constructer of the Nucleus type\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nnucleus(code) = Nucleus(code = code)\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"68cba21d74e51cf2\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nbegin\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> struct Nb--> a notebook having nuclei made up of code cells only.\\\\n> * Fields:\\\\n> * nuclei--> Array of Nucleus type\\\\n> * name--> name of notebook\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nmutable struct Nb\\\\n\\\\tnuclei::Array{Nucleus,1}\\\\n\\\\tname::AbstractString\\\\nend\\\\n\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> nuclei(nuclei::Array)--> Helper to collect an array of Nucleus.\\\\t\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nnuclei(nuclei::Array) = nuclei\\\\n\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> nuclei(nuclei::Array)--> Helper to collect an name of a notebook.\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nname(name::AbstractString) = name\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"8a8f00fd386be909\"), MIME type application/vnd.pluto.tree+object)), (4, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nbegin\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nHeaders that would appear in a code file\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nconst header = \\\\\\\"### A Nbdev script file ###\\\\\\\"\\\\nconst subheader = \\\\\\\"### Autogenerated file. Don't modify. ###\\\\\\\"\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"2cb8115cfcbe050a\"), MIME type application/vnd.pluto.tree+object)), (5, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nThis had to be done because having the cell iddelimeter as a constant gives an error during parsing the notebook\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\ncelliddelim=string(\\\\\\\"#\\\\\\\",\\\\\\\" \u2554\u2550\u2561 \\\\\\\")\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"280e2b5284fa853\"), MIME type application/vnd.pluto.tree+object)), (6, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nmarks the end of a cell\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nconst cellsuff = \\\\\\\"\\\\\\\\n\\\\\\\\n\\\\\\\"\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"c896ba64347b56ba\"), MIME type application/vnd.pluto.tree+object)), (7, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> struct Scrubbednb--> Represents a notebook from which all but code to be exported are scrubbed off.\\\\n> * Fields-->\\\\n> * cells--> Vector of strings.\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nmutable struct Scrubbednb\\\\n\\\\tcells::Array{String, 1}\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"f2f55cae09389a9d\"), MIME type application/vnd.pluto.tree+object)), (8, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> collectnuclei(notebook::Scrubbednb, marker)--> Reads a notebook, collects code from code cells and returns an array of Nucelus.\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nfunction collectnuclei(nb::Scrubbednb, marker)\\\\n\\\\tnbcells=nb.cells\\\\n\\\\tnuclei=[]\\\\n\\\\t\\\\t\\\\n for i in 1:length(nbcells)\\\\n \\\\traw_code=nbcells[i]\\\\n \\\\tnucleus=Nucleus(raw_code)\\\\n \\\\t\\\\n \\\\tif startswith(raw_code, marker)\\\\n push!(nuclei,nucleus)\\\\n end\\\\n \\\\t\\\\n end\\\\n\\\\t nuclei\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"cd0480153d56e5b0\"), MIME type application/vnd.pluto.tree+object)), (9, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nbegin\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n>loadscrubbednb(io, path)::Scrubbednb--> These are modification of the Pluto.load_notebook methods. Scrubs the notebook of all stuff but the code to be exported.\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nfunction loadscrubbednb(io, path)::Scrubbednb\\\\n collectedcells = []\\\\n\\\\t\\\\t\\\\n\\\\t# ignore first bits of file\\\\n readuntil(io,celliddelim)\\\\n\\\\n last_read = \\\\\\\"\\\\\\\"\\\\n while !eof(io)\\\\n cellidstr = String(readline(io))\\\\n if cellidstr == \\\\\\\"Cell order:\\\\\\\"\\\\n break\\\\n else\\\\n rawcode = String(readuntil(io, celliddelim))\\\\n # change Windows line endings to Linux\\\\n normalisedcode = replace(rawcode, \\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\" => \\\\\\\"\\\\\\\\n\\\\\\\")\\\\n # remove the cell appendix\\\\n code = normalisedcode[1:prevind(normalisedcode, end, length(cellsuff))]\\\\n\\\\n readcell = code\\\\n push!(collectedcells, readcell)\\\\n end\\\\n end\\\\n\\\\t\\\\t\\\\n\\\\tScrubbednb(collectedcells)\\\\nend\\\\n\\\\t\\\\nfunction loadscrubbednb(path::String)::Scrubbednb\\\\n local loaded\\\\n open(path, \\\\\\\"r\\\\\\\") do io\\\\n loaded = loadscrubbednb(io, path)\\\\n end\\\\n loaded\\\\nend\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"a50cf188ed67c684\"), MIME type application/vnd.pluto.tree+object)), \"more\", (18, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nexport notebook2script\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"89a791483600df1b\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"\", :objectid => \"10ceda263061fd\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"\\\"01_export.jl\\\"\", MIME type text/plain))], :struct, \"Nb\", \"2126f5d7e906cd28\"] #noop @test testnb.nuclei[1].code == \"#export\\nimport Pluto: Notebook, Cell, load_notebook_nobackup\" ------ Output ------ something to save files strip strip \u2013> Helper fucntion to replace a substring y in a string x with blank. Example fn = \"01_export.jl\" ------ Output ------ \"01_export.jl\" #noop @test uppercasefirst(strip(strip(fn, r\"[0-9_]\"), r\".jl\")) == \"Export\" ------ Output ------ savenb To export the required code, the following scenarios must be considered. \ud83d\udc49 Check if the file is in the src directory. If it's there then overwrite it. \ud83d\udc49 If it's not there then create and then write. savenb(io, nb)\u2013> Reads the supplied notebook and creates an io and writes stuffs like the module name and the content to the created io. source savenb(nb::Nb, path::String)\u2013> Creates a file in the supplied path with the name in the NB type. source readfilenames readfilenames(nbsdir::String)\u2013> Reads files in the directory and subdirectories in the given path. Reads only the files with .jl\\ extension source Example expected_list = [\"..\\\\nbs\\\\00_nbdev.jl\", \"..\\\\nbs\\\\01_export.jl\", \"..\\\\nbs\\\\02_documenter.jl\", \"..\\\\nbs\\\\03_codeRunner.jl\", \"..\\\\nbs\\\\04_makedocs.jl\", \"..\\\\nbs\\\\05_make.jl\", \"..\\\\nbs\\\\06_common.jl\", \"..\\\\nbs\\\\developerguide.jl\", \"..\\\\nbs\\\\index.jl\", \"..\\\\nbs\\\\styleguide.jl\", \"..\\\\nbs\\\\tutorial.jl\"] ------ Output ------ Any[\"String\", Tuple{Int64, Any}[(1, (\"\\\"..\\\\\\\\nbs\\\\\\\\00_nbdev.jl\\\"\", MIME type text/plain)), (2, (\"\\\"..\\\\\\\\nbs\\\\\\\\01_export.jl\\\"\", MIME type text/plain)), (3, (\"\\\"..\\\\\\\\nbs\\\\\\\\02_documenter.jl\\\"\", MIME type text/plain)), (4, (\"\\\"..\\\\\\\\nbs\\\\\\\\03_codeRunner.jl\\\"\", MIME type text/plain)), (5, (\"\\\"..\\\\\\\\nbs\\\\\\\\04_makedocs.jl\\\"\", MIME type text/plain)), (6, (\"\\\"..\\\\\\\\nbs\\\\\\\\05_make.jl\\\"\", MIME type text/plain)), (7, (\"\\\"..\\\\\\\\nbs\\\\\\\\06_common.jl\\\"\", MIME type text/plain)), (8, (\"\\\"..\\\\\\\\nbs\\\\\\\\developerguide.jl\\\"\", MIME type text/plain)), (9, (\"\\\"..\\\\\\\\nbs\\\\\\\\index.jl\\\"\", MIME type text/plain)), (10, (\"\\\"..\\\\\\\\nbs\\\\\\\\styleguide.jl\\\"\", MIME type text/plain)), (11, (\"\\\"..\\\\\\\\nbs\\\\\\\\tutorial.jl\\\"\", MIME type text/plain))], :Array, \"\", \"23e017f969fac20f\"] readfilenames(joinpath(\"..\", \"nbs\")) ------ Output ------ Any[\"Any\", Tuple{Int64, Any}[(1, (\"\\\"..\\\\\\\\nbs\\\\\\\\00_nbdev.jl\\\"\", MIME type text/plain)), (2, (\"\\\"..\\\\\\\\nbs\\\\\\\\01_export.jl\\\"\", MIME type text/plain)), (3, (\"\\\"..\\\\\\\\nbs\\\\\\\\02_documenter.jl\\\"\", MIME type text/plain)), (4, (\"\\\"..\\\\\\\\nbs\\\\\\\\03_codeRunner.jl\\\"\", MIME type text/plain)), (5, (\"\\\"..\\\\\\\\nbs\\\\\\\\04_make.jl\\\"\", MIME type text/plain)), (6, (\"\\\"..\\\\\\\\nbs\\\\\\\\05_common.jl\\\"\", MIME type text/plain)), (7, (\"\\\"..\\\\\\\\nbs\\\\\\\\developerguide.jl\\\"\", MIME type text/plain)), (8, (\"\\\"..\\\\\\\\nbs\\\\\\\\index.jl\\\"\", MIME type text/plain)), (9, (\"\\\"..\\\\\\\\nbs\\\\\\\\styleguide.jl\\\"\", MIME type text/plain)), (10, (\"\\\"..\\\\\\\\nbs\\\\\\\\tutorial.jl\\\"\", MIME type text/plain))], :Array, \"\", \"7006c9f7fee7907f\"] #noop @test readfilenames(joinpath(\"..\", \"nbs\")) == expected_list ------ Output ------ exportfile exportfile(f::String, srcdir::String, marker::String)\u2013> Loads the file in the supplied path and reads the cells which are marked with #export. Then saves the notebook in the given path source exportcontent exportcontent(fns::AbstractVector, srcdir::String, marker::String)\u2013> maps the export_file function to each files source getfileextension getfileextension(fn)\u2013> get the file extensions in the pwd source Example #noop @test getfileextension(\"test.jl\") == \".jl\" ------ Output ------ notebook2script notebook2script(nbsdir::String, srcdir::String)\u2013> Export all the code from the provided notebook directory to the given source directory source notebook2script can be called from a notebook which you intend to export. Usually in the last cell of that notebook notebook2script(joinpath(\"..\", \"nbs\"), joinpath(\"..\", \"src\")) ------ Output ------ Any[\"Nothing\", Tuple{Int64, Any}[(1, (\"nothing\", MIME type text/plain)), (2, (\"nothing\", MIME type text/plain)), (3, (\"nothing\", MIME type text/plain)), (4, (\"nothing\", MIME type text/plain)), (5, (\"nothing\", MIME type text/plain)), (6, (\"nothing\", MIME type text/plain)), (7, (\"nothing\", MIME type text/plain)), (8, (\"nothing\", MIME type text/plain)), (9, (\"nothing\", MIME type text/plain)), (10, (\"nothing\", MIME type text/plain))], :Array, \"\", \"2a0906d67f73e881\"]","title":"Export"},{"location":"export/#lower-level-entitiesstructs-methods-etc","text":"These are the objects on which nbdev's Export module was built. You can use it to extend nbdev but these are automtically used by Nbdev's internal engine to generate code files for you.","title":"Lower Level Entities&#40;Structs, methods etc.&#41;"},{"location":"export/#nucleus-type","text":"Nucleus(code)\u2013>Getter for accessing the constructer of the Nucleus type source Every time a code cell is parsed, it gets stored as a Nucleus type. The stored code can then be accessed using the code field in the Nucleus type.","title":"Nucleus type"},{"location":"export/#nb-type","text":"struct Nb\u2013> a notebook having nuclei made up of code cells only. Fields: nuclei\u2013> Array of Nucleus type name\u2013> name of notebook source nuclei(nuclei::Array)\u2013> Helper to collect an array of Nucleus. source nuclei(nuclei::Array)\u2013> Helper to collect an name of a notebook. source A Nb type is used to collect all code cells(which are contained in the Nucleus type. These code cells are actual code represented as string.","title":"Nb type"},{"location":"export/#loadscrubbednb","text":"loadscrubbednb(io, path)::Scrubbednb\u2013> These are modification of the Pluto.load_notebook methods. Scrubs the notebook of all stuff but the code to be exported. source loadscrubbednb reads the notebook in the given path cell by cell, while ignoring the stuffs in the notebook like the cell order delimeters and the cell start delimeter. The result is a ScrubbedNotebook type which contains only the code which you intend to export.","title":"loadscrubbednb"},{"location":"export/#high-level-apis","text":"This too are called automatically by Nbdev.","title":"High Level APIs"},{"location":"export/#loadnb","text":"loadnb(filename::String, marker::String)\u2013> High level function which calls load nb source load nb(filename::String, marker::String)\u2013> creates a scrubbed notebook and returns a curated Nb type having code to be exported. source","title":"loadnb"},{"location":"export/#scrubbednb","text":"testnb= loadnb(\"01_export.jl\", \"#export\") ------ Output ------ Any[\"Nb\", Any[(:nuclei, (Dict{Symbol, Any}(:prefix => \"Main.workspace#4.Nucleus\", :elements => Any[(1, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nimport Pluto: Notebook, Cell, load_notebook_nobackup\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"5342514a49d27ca0\"), MIME type application/vnd.pluto.tree+object)), (2, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nbegin\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> struct Nucleus--> This is the lowest entity of a code notebook. This type represents the code cell in a Pluto notebook.\\\\n> * Fields:\\\\n> * code--> String which makes up a code cell\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nBase.@kwdef mutable struct Nucleus\\\\n\\\\tcode::String=\\\\\\\"\\\\\\\"\\\\n\\\\tend\\\\n\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> Nucleus(code)-->Getter for accessing the constructer of the Nucleus type\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nnucleus(code) = Nucleus(code = code)\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"68cba21d74e51cf2\"), MIME type application/vnd.pluto.tree+object)), (3, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nbegin\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> struct Nb--> a notebook having nuclei made up of code cells only.\\\\n> * Fields:\\\\n> * nuclei--> Array of Nucleus type\\\\n> * name--> name of notebook\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nmutable struct Nb\\\\n\\\\tnuclei::Array{Nucleus,1}\\\\n\\\\tname::AbstractString\\\\nend\\\\n\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> nuclei(nuclei::Array)--> Helper to collect an array of Nucleus.\\\\t\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nnuclei(nuclei::Array) = nuclei\\\\n\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> nuclei(nuclei::Array)--> Helper to collect an name of a notebook.\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nname(name::AbstractString) = name\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"8a8f00fd386be909\"), MIME type application/vnd.pluto.tree+object)), (4, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nbegin\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nHeaders that would appear in a code file\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nconst header = \\\\\\\"### A Nbdev script file ###\\\\\\\"\\\\nconst subheader = \\\\\\\"### Autogenerated file. Don't modify. ###\\\\\\\"\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"2cb8115cfcbe050a\"), MIME type application/vnd.pluto.tree+object)), (5, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nThis had to be done because having the cell iddelimeter as a constant gives an error during parsing the notebook\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\ncelliddelim=string(\\\\\\\"#\\\\\\\",\\\\\\\" \u2554\u2550\u2561 \\\\\\\")\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"280e2b5284fa853\"), MIME type application/vnd.pluto.tree+object)), (6, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nmarks the end of a cell\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nconst cellsuff = \\\\\\\"\\\\\\\\n\\\\\\\\n\\\\\\\"\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"c896ba64347b56ba\"), MIME type application/vnd.pluto.tree+object)), (7, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> struct Scrubbednb--> Represents a notebook from which all but code to be exported are scrubbed off.\\\\n> * Fields-->\\\\n> * cells--> Vector of strings.\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nmutable struct Scrubbednb\\\\n\\\\tcells::Array{String, 1}\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"f2f55cae09389a9d\"), MIME type application/vnd.pluto.tree+object)), (8, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n> collectnuclei(notebook::Scrubbednb, marker)--> Reads a notebook, collects code from code cells and returns an array of Nucelus.\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nfunction collectnuclei(nb::Scrubbednb, marker)\\\\n\\\\tnbcells=nb.cells\\\\n\\\\tnuclei=[]\\\\n\\\\t\\\\t\\\\n for i in 1:length(nbcells)\\\\n \\\\traw_code=nbcells[i]\\\\n \\\\tnucleus=Nucleus(raw_code)\\\\n \\\\t\\\\n \\\\tif startswith(raw_code, marker)\\\\n push!(nuclei,nucleus)\\\\n end\\\\n \\\\t\\\\n end\\\\n\\\\t nuclei\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"cd0480153d56e5b0\"), MIME type application/vnd.pluto.tree+object)), (9, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nbegin\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n>loadscrubbednb(io, path)::Scrubbednb--> These are modification of the Pluto.load_notebook methods. Scrubs the notebook of all stuff but the code to be exported.\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nfunction loadscrubbednb(io, path)::Scrubbednb\\\\n collectedcells = []\\\\n\\\\t\\\\t\\\\n\\\\t# ignore first bits of file\\\\n readuntil(io,celliddelim)\\\\n\\\\n last_read = \\\\\\\"\\\\\\\"\\\\n while !eof(io)\\\\n cellidstr = String(readline(io))\\\\n if cellidstr == \\\\\\\"Cell order:\\\\\\\"\\\\n break\\\\n else\\\\n rawcode = String(readuntil(io, celliddelim))\\\\n # change Windows line endings to Linux\\\\n normalisedcode = replace(rawcode, \\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\" => \\\\\\\"\\\\\\\\n\\\\\\\")\\\\n # remove the cell appendix\\\\n code = normalisedcode[1:prevind(normalisedcode, end, length(cellsuff))]\\\\n\\\\n readcell = code\\\\n push!(collectedcells, readcell)\\\\n end\\\\n end\\\\n\\\\t\\\\t\\\\n\\\\tScrubbednb(collectedcells)\\\\nend\\\\n\\\\t\\\\nfunction loadscrubbednb(path::String)::Scrubbednb\\\\n local loaded\\\\n open(path, \\\\\\\"r\\\\\\\") do io\\\\n loaded = loadscrubbednb(io, path)\\\\n end\\\\n loaded\\\\nend\\\\nend\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"a50cf188ed67c684\"), MIME type application/vnd.pluto.tree+object)), \"more\", (18, (Dict{Symbol, Any}(:prefix => \"Nucleus\", :elements => Any[(:code, (\"\\\"#export\\\\nexport notebook2script\\\"\", MIME type text/plain))], :type => :struct, :prefix_short => \"Nucleus\", :objectid => \"89a791483600df1b\"), MIME type application/vnd.pluto.tree+object))], :type => :Array, :prefix_short => \"\", :objectid => \"10ceda263061fd\"), MIME type application/vnd.pluto.tree+object)), (:name, (\"\\\"01_export.jl\\\"\", MIME type text/plain))], :struct, \"Nb\", \"2126f5d7e906cd28\"] #noop @test testnb.nuclei[1].code == \"#export\\nimport Pluto: Notebook, Cell, load_notebook_nobackup\" ------ Output ------ something to save files","title":"Scrubbednb"},{"location":"export/#strip","text":"strip \u2013> Helper fucntion to replace a substring y in a string x with blank.","title":"strip"},{"location":"export/#savenb","text":"To export the required code, the following scenarios must be considered. \ud83d\udc49 Check if the file is in the src directory. If it's there then overwrite it. \ud83d\udc49 If it's not there then create and then write. savenb(io, nb)\u2013> Reads the supplied notebook and creates an io and writes stuffs like the module name and the content to the created io. source savenb(nb::Nb, path::String)\u2013> Creates a file in the supplied path with the name in the NB type. source","title":"savenb"},{"location":"export/#readfilenames","text":"readfilenames(nbsdir::String)\u2013> Reads files in the directory and subdirectories in the given path. Reads only the files with .jl\\ extension source","title":"readfilenames"},{"location":"export/#exportfile","text":"exportfile(f::String, srcdir::String, marker::String)\u2013> Loads the file in the supplied path and reads the cells which are marked with #export. Then saves the notebook in the given path source","title":"exportfile"},{"location":"export/#exportcontent","text":"exportcontent(fns::AbstractVector, srcdir::String, marker::String)\u2013> maps the export_file function to each files source","title":"exportcontent"},{"location":"export/#getfileextension","text":"getfileextension(fn)\u2013> get the file extensions in the pwd source","title":"getfileextension"},{"location":"export/#notebook2script","text":"notebook2script(nbsdir::String, srcdir::String)\u2013> Export all the code from the provided notebook directory to the given source directory source notebook2script can be called from a notebook which you intend to export. Usually in the last cell of that notebook notebook2script(joinpath(\"..\", \"nbs\"), joinpath(\"..\", \"src\")) ------ Output ------ Any[\"Nothing\", Tuple{Int64, Any}[(1, (\"nothing\", MIME type text/plain)), (2, (\"nothing\", MIME type text/plain)), (3, (\"nothing\", MIME type text/plain)), (4, (\"nothing\", MIME type text/plain)), (5, (\"nothing\", MIME type text/plain)), (6, (\"nothing\", MIME type text/plain)), (7, (\"nothing\", MIME type text/plain)), (8, (\"nothing\", MIME type text/plain)), (9, (\"nothing\", MIME type text/plain)), (10, (\"nothing\", MIME type text/plain))], :Array, \"\", \"2a0906d67f73e881\"]","title":"notebook2script"},{"location":"make/","text":"Make using PlutoTest ------ Output ------ build build(nbsdir)\u2013> extracts markdown items and builds documentation from the notebooks in the given directory. Also, creates creates a readme file with content in the project root. source new new(projname)-> Scaffolds a new project sub-directories and configuration files. source The new() function can be used when you want to create a project in a cloned repo. All the files and subdirectories would be blank. testdir = \"../test\" ------ Output ------ \"../test\" new(testdir) ------ Output ------ #noop @test isdir(joinpath(testdir, \"nbs\")) == true ------ Output ------ #noop @test isdir(joinpath(testdir, \"docs\")) == true ------ Output ------ #noop @test isdir(joinpath(testdir, \"src\")) == true ------ Output ------ #noop @test isdir(joinpath(testdir, \"docs\", \"images\")) == true ------ Output ------ #noop @test isdir(joinpath(testdir, \"docs\", \"assets\")) == true ------ Output ------ #noop @test isfile(joinpath(testdir, \"Project.toml\")) == true ------ Output ------ #noop @test isfile(joinpath(testdir, \"Manifest.toml\")) == true ------ Output ------ #noop @test isfile(joinpath(testdir, \"mkdocs.yml\")) == true ------ Output ------ #noop @test isfile(joinpath(testdir, \"nbs\", \"index.jl\")) == true ------ Output ------ #noop begin dirs = [\"$testdir/docs\", \"$testdir/nbs\", \"$testdir/src\"] files = [\"$testdir/Manifest.toml\", \"$testdir/Project.toml\", \"$testdir/mkdocs.yml\"] map(dir -> rm(dir, recursive = true), dirs) map(rm, files) end ------ Output ------","title":"Make"},{"location":"make/#build","text":"build(nbsdir)\u2013> extracts markdown items and builds documentation from the notebooks in the given directory. Also, creates creates a readme file with content in the project root. source","title":"build"},{"location":"make/#new","text":"new(projname)-> Scaffolds a new project sub-directories and configuration files. source The new() function can be used when you want to create a project in a cloned repo. All the files and subdirectories would be blank. testdir = \"../test\" ------ Output ------ \"../test\" new(testdir) ------ Output ------ #noop @test isdir(joinpath(testdir, \"nbs\")) == true ------ Output ------ #noop @test isdir(joinpath(testdir, \"docs\")) == true ------ Output ------ #noop @test isdir(joinpath(testdir, \"src\")) == true ------ Output ------ #noop @test isdir(joinpath(testdir, \"docs\", \"images\")) == true ------ Output ------ #noop @test isdir(joinpath(testdir, \"docs\", \"assets\")) == true ------ Output ------ #noop @test isfile(joinpath(testdir, \"Project.toml\")) == true ------ Output ------ #noop @test isfile(joinpath(testdir, \"Manifest.toml\")) == true ------ Output ------ #noop @test isfile(joinpath(testdir, \"mkdocs.yml\")) == true ------ Output ------ #noop @test isfile(joinpath(testdir, \"nbs\", \"index.jl\")) == true ------ Output ------ #noop begin dirs = [\"$testdir/docs\", \"$testdir/nbs\", \"$testdir/src\"] files = [\"$testdir/Manifest.toml\", \"$testdir/Project.toml\", \"$testdir/mkdocs.yml\"] map(dir -> rm(dir, recursive = true), dirs) map(rm, files) end ------ Output ------","title":"new"},{"location":"styleguide/","text":"Styleguide Many ideas for the style guide here are borrowed fom the great FastAI library . So, some of the code style may seem similar. There is good reason to borrow coding style ideas from the fastai library. Some of them are \ud83d\udc47 Avoid too much scrolling while reading the code. Convey information as fast as possible. Keep things simple. Spend less time on thinking what a particular piece of code does i.e. the name of a code piece should make it clear about the intention of that code. Naming Module names are single words with the starting letter as uppercase. Functions and variables are lowercase single words. For example, makedocs . This is to keep thing simple and easier for the user to remember the names. For example, the end user should not get confused about wether the name had an underscore or not. Struct names are single word and start with an upper case. Commonly used things should be shorter. For example, \"object\" is named o . \"image\" is named img . input is denoted with x. Look in the \"Abbr\" section for a list of abbrevations used. Feel free to add any abbrevations which are missed. Layout One line of code should implement one complete idea, where possible Generally therefore an if part and its 1-line statement should be on one line Using the ternary operator x = y if a else b can help with this guideline. If a 1-line function body comfortably fits on the same line as the function section, feel free to put them together. In such cases, wherever possible, the functions can also be denoted in the \"expression\" format like func(x) = x+1 . If you\u2019ve got a bunch of 1-line functions doing similar things, they don\u2019t need a blank line between them These can be grouped together. begin f(x:: Int8) = x+1 function f(x:: Float16) x*2 end end ------ Output ------ f (generic function with 2 methods) Aim to align statement parts that are conceptually similar. It allows the reader to quickly see how they\u2019re different. For example if foo == 0 x = f(x) else x = f(x) end","title":"Styleguide"},{"location":"styleguide/#naming","text":"Module names are single words with the starting letter as uppercase. Functions and variables are lowercase single words. For example, makedocs . This is to keep thing simple and easier for the user to remember the names. For example, the end user should not get confused about wether the name had an underscore or not. Struct names are single word and start with an upper case. Commonly used things should be shorter. For example, \"object\" is named o . \"image\" is named img . input is denoted with x. Look in the \"Abbr\" section for a list of abbrevations used. Feel free to add any abbrevations which are missed.","title":"Naming"},{"location":"styleguide/#layout","text":"One line of code should implement one complete idea, where possible Generally therefore an if part and its 1-line statement should be on one line Using the ternary operator x = y if a else b can help with this guideline. If a 1-line function body comfortably fits on the same line as the function section, feel free to put them together. In such cases, wherever possible, the functions can also be denoted in the \"expression\" format like func(x) = x+1 . If you\u2019ve got a bunch of 1-line functions doing similar things, they don\u2019t need a blank line between them These can be grouped together. begin f(x:: Int8) = x+1 function f(x:: Float16) x*2 end end ------ Output ------ f (generic function with 2 methods) Aim to align statement parts that are conceptually similar. It allows the reader to quickly see how they\u2019re different. For example if foo == 0 x = f(x) else x = f(x) end","title":"Layout"},{"location":"tutorial/","text":"Tutorial First steps Install Nbdev by with the following command \u2013> add Nbdev This will install Nbdev in your global environment. Create a directory in your local system where you would want to start your work. For example, in your local system cd into this directory now. This will be the place where you are going to place your project. Now open a command prompt from inside this directory and type julia , this will launch a Julia shell. Here type ] to launch the \"pkg\" prompt and then you can type activate . in order to create a restricted environment where you can restrict further installations or else you can skip typing activate . and type import Nbdev followed by Nbdev.new() . This will create the \"docs\", \"Nbdev\", \"nbs\" and \"src\" directories in your project root. In addition to these directories the \"Manifest.toml\", mkdocs.yml\" and \"Project.toml\" will also be created at the project root. Note Right now nbdev is highly opinionated about the folder structure like presence of \"nbs\", \"src\" and \"docs\" directory. First notebook Inside the project directory, open a terminal and start Pluto the usual way and create a notebook inside the \"nbs\" directory. At this point you might have installed Nbdev in your global environment. If this is not the case then follow any of the below methods. Start building your project There are some anchors which tell Nbdev about the portion of your notebook that should be exported as code or should be part of documentation or should not be touched. #export when you put the comment #export at the begining of a cell, it tells nbdev to export that cell as a code into the source file. #export function somefunc(x) x+1 end Nbdev will now put the above cell as part of the source file (with the same name as the current notebook) inside the src directory. #hide Suppose that you have included soem cells as par of experment while developing your package but you want that the cell should neither be exported as a code nor that should be exported as part of documentation. In such a case use the #hide anchor at the begining of the cell. #hide myexperiment = 1+1 such a cell won't be exported. Any other cell which neither has the #hide nor the #export anchor, is exported as an example block. For such a block the cell is executed and the output is captured. The output and the code of an example cell appears in the final document. #noop Nbdev captures the output for cells which are not marked with #export by default. but there might be times when you have an example for which you just want to show the code and not the output. Such cases can be handled by the #noop anchor. Just start such cells with #noop and nbdev will not capture output for such cells. begin #noop \" some experiment \" function myexperiment 1+1 end myexperiment end In the above case even though Pluto displays the docstring as an output, that output won't be displayed in your document. As another example let's consider something like the code below #noop add = 1+1 add ` The output for such code cell won't be captured in the documentation. Only the code will be displayed once you build the document. Docstrings Define a docstring for functions, structs etc. and use the special function showDoc to document that function or struct \"\"\" > This is a function docstring \"\"\" function somefunc() 1+1 end ------ Output ------ <div class=\"pluto-docs-binding\"> <span>somefunc</span> <div class=\"markdown\"><blockquote> <p>This is a function docstring</p> </blockquote> </div> </div> showdoc(somefunc) would show the function like this \ud83d\udc47 showdoc(somefunc) Exporting code Once you are done with your notebook and you can run notebook2script() . This reads the current notebook in the \"nbs\" folder, scrubs out all the cells which are do not start with #export and creates a module file in the src folder. The module file in the src folder will have the same name as the current file with the first letter in uppercase. The exported code file automatically has all the code inside the module with the same name as the file. For example, the exported source code file would have the following structure \ud83d\udc47 module Example function somefunc(x) x+1 end end Once you are happy with the code you can export the source code by calling notebook2script(nbsdir, srcdir) Here \"nbs dir\" is the directory where your notebooks are stored and the \"src dir\" is the directory where you want your source code files to be exported. This is usually the src directory. Tests Nbdev comes with support for PlutoTests(in alpha) out of the box. What this means is that you can write reactive tests within the same notebook where you are writing your code. when you run that particular notebook, the affected tests are executed. So, you can write tests as you write your code. In addition to reactivity you can also take advantage of other goodies in PlutoTests like \"time travel\" to see the different stages of your code (follow the link to PlutoTests for further details). Note Currently PlutoTests is in alpha so use it with caution. However, you can even use the native test suite in Julia to write your tests but won't get features like time travel while using the native test suite. Automatic execution of tests using github actions or Travis CI is planned for future versions of PlutoTest Building documentation Do not forget to edit the \"index\" notebook available in the \"nbs\" folder. This notebook would be used as your homepage and the contents of this notebook are also used in the README file. Note You will get the index notebook in the nbs directory when you create a new project using the nbdev template. To build documentation, goto the project root and launch the Julia prompt and then import Nbdev with import Nbdev and then call the following function Nbdev.build(<your notebook directory) . Your code at the Julia prompt should look like this import Nbdev Nbdev.build(\"nbs\") This will run all your notebooks in the notebook directory (/nbs usually) and pick up the cells which are not marked as #export or #hide and then create markdown files in the /docs directory. Creating the Table of contents The default configuration in the \"mkdocs.yml\" file (available to you when you create your repository from the template) contains all the necessary default configuration required to create you project page. In order to test how your website looks like, go to the project root and type mkdocs serve . This would serve the project documentation to view locally (localhost). The table of contents in the default case would be created by mkdocs on the basis of the documents available under the \"docs\" directory. If you want to give your own spin to the table of contents then add a config similar to the following in the mkdocs.yml file\u2013> nav: - Home: index.md - Docs: - Nav1: nav1.md - Nav2: nav2.md Note Make sure that the \"Home\" navigation should always be the index.md file For more details about setting up navigation refer this and this Other required edits In the mkdocs.yml file, edit the \"site name\" config to the name that you want to give to your site. The \"repo url\" and \"repo_name\" should be your git repository url and the name of your git repository respectively. Optional edits There are loads of other optional edits which you can make to the config file in order to customize your project website. Refer the documentation here to know about the other options. Publishing your project website The first step is to checkin all your project contents to your repoitory. As soon as you push your changes to the remote branch, the github action (placed under \"/.github/workflows\" creates a new \"gh-pages\" branch under your project repository, builds the project webpages and pushes the created pages to the \"\"gh-pages\" branch. If you go to the \"Actions\" tab in your github repository then you can view the Action under the \"All workflows\" section. Here, a green tick mark before the action name suggests that all went fine. Now, go to the Settings tab in your repository, click on Pages menu item from the left menu and in the \"Source\" drop-down select \"gh-pages\" as the source and root as the source folder, Click on save. A detailed step by step description about configuring github pages can be read here . You project website would be published at the following url \u2013> \"<username>.github.io/<project reporsitory name>\"","title":"Tutorial"},{"location":"tutorial/#first-steps","text":"Install Nbdev by with the following command \u2013> add Nbdev This will install Nbdev in your global environment. Create a directory in your local system where you would want to start your work. For example, in your local system cd into this directory now. This will be the place where you are going to place your project. Now open a command prompt from inside this directory and type julia , this will launch a Julia shell. Here type ] to launch the \"pkg\" prompt and then you can type activate . in order to create a restricted environment where you can restrict further installations or else you can skip typing activate . and type import Nbdev followed by Nbdev.new() . This will create the \"docs\", \"Nbdev\", \"nbs\" and \"src\" directories in your project root. In addition to these directories the \"Manifest.toml\", mkdocs.yml\" and \"Project.toml\" will also be created at the project root. Note Right now nbdev is highly opinionated about the folder structure like presence of \"nbs\", \"src\" and \"docs\" directory.","title":"First steps"},{"location":"tutorial/#first-notebook","text":"Inside the project directory, open a terminal and start Pluto the usual way and create a notebook inside the \"nbs\" directory. At this point you might have installed Nbdev in your global environment. If this is not the case then follow any of the below methods.","title":"First notebook"},{"location":"tutorial/#start-building-your-project","text":"There are some anchors which tell Nbdev about the portion of your notebook that should be exported as code or should be part of documentation or should not be touched.","title":"Start building your project"},{"location":"tutorial/#docstrings","text":"Define a docstring for functions, structs etc. and use the special function showDoc to document that function or struct \"\"\" > This is a function docstring \"\"\" function somefunc() 1+1 end ------ Output ------ <div class=\"pluto-docs-binding\"> <span>somefunc</span> <div class=\"markdown\"><blockquote> <p>This is a function docstring</p> </blockquote> </div> </div> showdoc(somefunc) would show the function like this \ud83d\udc47 showdoc(somefunc)","title":"Docstrings"},{"location":"tutorial/#exporting-code","text":"Once you are done with your notebook and you can run notebook2script() . This reads the current notebook in the \"nbs\" folder, scrubs out all the cells which are do not start with #export and creates a module file in the src folder. The module file in the src folder will have the same name as the current file with the first letter in uppercase. The exported code file automatically has all the code inside the module with the same name as the file. For example, the exported source code file would have the following structure \ud83d\udc47 module Example function somefunc(x) x+1 end end Once you are happy with the code you can export the source code by calling notebook2script(nbsdir, srcdir) Here \"nbs dir\" is the directory where your notebooks are stored and the \"src dir\" is the directory where you want your source code files to be exported. This is usually the src directory.","title":"Exporting code"},{"location":"tutorial/#tests","text":"Nbdev comes with support for PlutoTests(in alpha) out of the box. What this means is that you can write reactive tests within the same notebook where you are writing your code. when you run that particular notebook, the affected tests are executed. So, you can write tests as you write your code. In addition to reactivity you can also take advantage of other goodies in PlutoTests like \"time travel\" to see the different stages of your code (follow the link to PlutoTests for further details). Note Currently PlutoTests is in alpha so use it with caution. However, you can even use the native test suite in Julia to write your tests but won't get features like time travel while using the native test suite. Automatic execution of tests using github actions or Travis CI is planned for future versions of PlutoTest","title":"Tests"},{"location":"tutorial/#building-documentation","text":"Do not forget to edit the \"index\" notebook available in the \"nbs\" folder. This notebook would be used as your homepage and the contents of this notebook are also used in the README file. Note You will get the index notebook in the nbs directory when you create a new project using the nbdev template. To build documentation, goto the project root and launch the Julia prompt and then import Nbdev with import Nbdev and then call the following function Nbdev.build(<your notebook directory) . Your code at the Julia prompt should look like this import Nbdev Nbdev.build(\"nbs\") This will run all your notebooks in the notebook directory (/nbs usually) and pick up the cells which are not marked as #export or #hide and then create markdown files in the /docs directory.","title":"Building documentation"},{"location":"tutorial/#creating-the-table-of-contents","text":"The default configuration in the \"mkdocs.yml\" file (available to you when you create your repository from the template) contains all the necessary default configuration required to create you project page. In order to test how your website looks like, go to the project root and type mkdocs serve . This would serve the project documentation to view locally (localhost). The table of contents in the default case would be created by mkdocs on the basis of the documents available under the \"docs\" directory. If you want to give your own spin to the table of contents then add a config similar to the following in the mkdocs.yml file\u2013> nav: - Home: index.md - Docs: - Nav1: nav1.md - Nav2: nav2.md Note Make sure that the \"Home\" navigation should always be the index.md file For more details about setting up navigation refer this and this","title":"Creating the Table of contents"},{"location":"tutorial/#other-required-edits","text":"In the mkdocs.yml file, edit the \"site name\" config to the name that you want to give to your site. The \"repo url\" and \"repo_name\" should be your git repository url and the name of your git repository respectively.","title":"Other required edits"},{"location":"tutorial/#optional-edits","text":"There are loads of other optional edits which you can make to the config file in order to customize your project website. Refer the documentation here to know about the other options.","title":"Optional edits"},{"location":"tutorial/#publishing-your-project-website","text":"The first step is to checkin all your project contents to your repoitory. As soon as you push your changes to the remote branch, the github action (placed under \"/.github/workflows\" creates a new \"gh-pages\" branch under your project repository, builds the project webpages and pushes the created pages to the \"\"gh-pages\" branch. If you go to the \"Actions\" tab in your github repository then you can view the Action under the \"All workflows\" section. Here, a green tick mark before the action name suggests that all went fine. Now, go to the Settings tab in your repository, click on Pages menu item from the left menu and in the \"Source\" drop-down select \"gh-pages\" as the source and root as the source folder, Click on save. A detailed step by step description about configuring github pages can be read here . You project website would be published at the following url \u2013> \"<username>.github.io/<project reporsitory name>\"","title":"Publishing your project website"}]}